{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"containers/","text":"Containers Containers have methods for adding, retrieving, deleting, and iterating pages. Containers implement the SPL interfaces RecursiveIterator and Countable , meaning that a container can be iterated using the SPL RecursiveIteratorIterator class. Creating containers Laminas\\Navigation\\AbstractContainer can not be instantiated directly. Use Laminas\\Navigation\\Navigation if you want to instantiate a container. Laminas\\Navigation\\Navigation can be constructed entirely empty, or take an array or a Traversable object with pages to put in the container. Each page provided via options will eventually be passed to the addPage() method of the container class, which means that each element in the options can be also be an array, Traversable object, or a Laminas\\Navigation\\Page\\AbstractPage instance. Creating a container using an array use Laminas\\Navigation\\Navigation; /* * Create a container from an array * * Each element in the array will be passed to * Laminas\\Navigation\\Page\\AbstractPage::factory() when constructing. */ $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'id' =&gt; 'home-link', 'uri' =&gt; '/', ], [ 'label' =&gt; 'Laminas', 'uri' =&gt; 'http://www.laminas-project.com/', 'order' =&gt; 100, ], [ 'label' =&gt; 'Page 2', 'controller' =&gt; 'page2', 'pages' =&gt; [ [ 'label' =&gt; 'Page 2.1', 'action' =&gt; 'page2_1', 'controller' =&gt; 'page2', 'class' =&gt; 'special-one', 'title' =&gt; 'This element has a special class', 'active' =&gt; true, ], [ 'label' =&gt; 'Page 2.2', 'action' =&gt; 'page2_2', 'controller' =&gt; 'page2', 'class' =&gt; 'special-two', 'title' =&gt; 'This element has a special class too', ], ], ], [ 'label' =&gt; 'Page 2 with params', 'action' =&gt; 'index', 'controller' =&gt; 'page2', // specify a param or two, 'params' =&gt; [ 'format' =&gt; 'json', 'foo' =&gt; 'bar', ] ], [ 'label' =&gt; 'Page 2 with params and a route', 'action' =&gt; 'index', 'controller' =&gt; 'page2', // specify a route name and a param for the route 'route' =&gt; 'nav-route-example', 'params' =&gt; [ 'format' =&gt; 'json', ], ], [ 'label' =&gt; 'Page 3', 'action' =&gt; 'index', 'controller' =&gt; 'index', 'module' =&gt; 'mymodule', 'reset_params' =&gt; false, ], [ 'label' =&gt; 'Page 4', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 4.1', 'uri' =&gt; '/page4', 'title' =&gt; 'Page 4 using uri', 'pages' =&gt; [ [ 'label' =&gt; 'Page 4.1.1', 'title' =&gt; 'Page 4 using mvc params', 'action' =&gt; 'index', 'controller' =&gt; 'page4', // let's say this page is active 'active' =&gt; '1', ] ], ], ], ], [ 'label' =&gt; 'Page 0?', 'uri' =&gt; '/setting/the/order/option', // setting order to -1 should make it appear first 'order' =&gt; -1, ], [ 'label' =&gt; 'Page 5', 'uri' =&gt; '/', // this page should not be visible 'visible' =&gt; false, 'pages' =&gt; [ [ 'label' =&gt; 'Page 5.1', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 5.1.1', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 5.1.2', 'uri' =&gt; '#', // let's say this page is active 'active' =&gt; true, ], ], ], ], ], ], ], [ 'label' =&gt; 'ACL page 1 (guest)', 'uri' =&gt; '#acl-guest', 'resource' =&gt; 'nav-guest', 'pages' =&gt; [ [ 'label' =&gt; 'ACL page 1.1 (foo)', 'uri' =&gt; '#acl-foo', 'resource' =&gt; 'nav-foo', ], [ 'label' =&gt; 'ACL page 1.2 (bar)', 'uri' =&gt; '#acl-bar', 'resource' =&gt; 'nav-bar', ], [ 'label' =&gt; 'ACL page 1.3 (baz)', 'uri' =&gt; '#acl-baz', 'resource' =&gt; 'nav-baz', ], [ 'label' =&gt; 'ACL page 1.4 (bat)', 'uri' =&gt; '#acl-bat', 'resource' =&gt; 'nav-bat', ], ], ], [ 'label' =&gt; 'ACL page 2 (member)', 'uri' =&gt; '#acl-member', 'resource' =&gt; 'nav-member', ], [ 'label' =&gt; 'ACL page 3 (admin', 'uri' =&gt; '#acl-admin', 'resource' =&gt; 'nav-admin', 'pages' =&gt; [ [ 'label' =&gt; 'ACL page 3.1 (nothing)', 'uri' =&gt; '#acl-nada', ], ], ], [ 'label' =&gt; 'Laminas', 'route' =&gt; 'api-tools-route', ], ]); Adding pages Adding pages to a container can be done with the methods addPage() , addPages() , or setPages() . See examples below for explanation. use Laminas\\Config\\Config; use Laminas\\Navigation\\Navigation; use Laminas\\Navigation\\Page\\AbstractPage; // create container $container = new Navigation(); // add page by giving a page instance $container-&gt;addPage(AbstractPage::factory([ 'uri' =&gt; 'http://www.example.com/', ]]); // add page by giving an array $container-&gt;addPage([ 'uri' =&gt; 'http://www.example.com/', ]); // add page by giving a Traversable object; in this case, a laminas-config // instance. $container-&gt;addPage(Config([ 'uri' =&gt; 'http://www.example.com/', ])); $pages = [ [ 'label' =&gt; 'Save', 'action' =&gt; 'save', ], [ 'label' =&gt; 'Delete', 'action' =&gt; 'delete', ], ]; // add two pages $container-&gt;addPages($pages); // remove existing pages and add the given pages $container-&gt;setPages($pages); Removing pages Removing pages can be done with removePage() or removePages() . removePage() accepts an instance of a page or an integer. Integer arguments correspond to the order a page has. removePages() will remove all pages in the container. use Laminas\\Navigation\\Navigation; $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'action' =&gt; 'page1', ], [ 'label' =&gt; 'Page 2', 'action' =&gt; 'page2', 'order' =&gt; 200, ], [ 'label' =&gt; 'Page 3', 'action' =&gt; 'page3', ], ]); // remove page by implicit page order $container-&gt;removePage(0); // removes Page 1 // remove page by instance $page3 = $container-&gt;findOneByAction('page3'); $container-&gt;removePage($page3); // removes Page 3 // remove page by explicit page order $container-&gt;removePage(200); // removes Page 2 // remove all pages $container-&gt;removePages(); // removes all pages Remove a page recursively Removing a page recursively can be done with the second parameter of the removePage() method, which expects a boolean value. use Laminas\\Navigation\\Navigation; $container = new Navigation( [ [ 'label' =&gt; 'Page 1', 'route' =&gt; 'page1', 'pages' =&gt; [ [ 'label' =&gt; 'Page 1.1', 'route' =&gt; 'page1/page1-1', 'pages' =&gt; [ [ 'label' =&gt; 'Page 1.1.1', 'route' =&gt; 'page1/page1-1/page1-1-1', ], ], ], ], ], ] ); // Removes Page 1.1.1 $container-&gt;removePage( $container-&gt;findOneBy('route', 'page1/page1-1/page1-1-1'), true ); Finding pages Containers have three finder methods for retrieving pages. Each recursively searches the container testing for properties with values that match the one provided. findOneBy($property, $value) : AbstractPage|null : Returns the first page found matching the criteria, or null if none was found. findAllBy($property, $value) : AbstractPage[] : Returns an array of all page instances matching the criteria. findBy($property, $value, $all = false) AbstractPage|AbstractPage[]|null : calls on one of the previous methods based on the value of $all . The finder methods can also be used magically by appending the property name to findBy , findOneBy , or findAllBy . As an example, findOneByLabel('Home') will return the first matching page with label 'Home'. Other combinations include findByLabel(...) , findOneByTitle(...) , findAllByController(...) , etc. Finder methods also work on custom properties, such as findByFoo('bar') . use Laminas\\Navigation\\Navigation; $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'uri' =&gt; 'page-1', 'foo' =&gt; 'bar', 'pages' =&gt; [ [ 'label' =&gt; 'Page 1.1', 'uri' =&gt; 'page-1.1', 'foo' =&gt; 'bar', ], [ 'label' =&gt; 'Page 1.2', 'uri' =&gt; 'page-1.2', 'class' =&gt; 'my-class', ], [ 'type' =&gt; 'uri', 'label' =&gt; 'Page 1.3', 'uri' =&gt; 'page-1.3', 'action' =&gt; 'about', ], ], ], [ 'label' =&gt; 'Page 2', 'id' =&gt; 'page_2_and_3', 'class' =&gt; 'my-class', 'module' =&gt; 'page2', 'controller' =&gt; 'index', 'action' =&gt; 'page1', ], [ 'label' =&gt; 'Page 3', 'id' =&gt; 'page_2_and_3', 'module' =&gt; 'page3', 'controller' =&gt; 'index', ], ]); // The 'id' is not required to be unique, but be aware that // having two pages with the same id will render the same id attribute // in menus and breadcrumbs. // Returns \"Page 2\": $found = $container-&gt;findBy('id', 'page_2_and_3'); // Returns \"Page 2\": $found = $container-&gt;findOneBy('id', 'page_2_and_3'); // Returns \"Page 2\" AND \"Page 3\": $found = $container-&gt;findBy('id', 'page_2_and_3', true); // Returns \"Page 2\": $found = $container-&gt;findById('page_2_and_3'); // Returns \"Page 2\": $found = $container-&gt;findOneById('page_2_and_3'); // Returns \"Page 2\" AND \"Page 3\": $found = $container-&gt;findAllById('page_2_and_3'); // Find all pages matching the CSS class \"my-class\": // Returns \"Page 1.2\" and \"Page 2\": $found = $container-&gt;findAllBy('class', 'my-class'); $found = $container-&gt;findAllByClass('my-class'); // Find first page matching CSS class \"my-class\": // Returns \"Page 1.2\": $found = $container-&gt;findOneByClass('my-class'); // Find all pages matching the CSS class \"non-existent\": // Returns an empty array. $found = $container-&gt;findAllByClass('non-existent'); // Find first page matching the CSS class \"non-existent\": // Returns null. $found = $container-&gt;findOneByClass('non-existent'); // Find all pages with custom property 'foo' = 'bar': // Returns \"Page 1\" and \"Page 1.1\": $found = $container-&gt;findAllBy('foo', 'bar'); // To achieve the same magically, 'foo' must be in lowercase. // This is because 'foo' is a custom property, and thus the // property name is not normalized to 'Foo': $found = $container-&gt;findAllByfoo('bar'); // Find all with controller = 'index': // Returns \"Page 2\" and \"Page 3\": $found = $container-&gt;findAllByController('index'); Iterating containers Laminas\\Navigation\\AbstractContainer implements RecursiveIterator . iterate a container recursively, use the RecursiveIteratorIterator class. use RecursiveIteratorIterator; use Laminas\\Navigation\\Navigation; /* * Create a container from an array */ $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 2.1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2.2', 'uri' =&gt; '#', ], ], ], [ 'label' =&gt; 'Page 3', 'uri' =&gt; '#', ], ]); // Iterate flat using regular foreach: // Output: Page 1, Page 2, Page 3 foreach ($container as $page) { echo $page-&gt;label; } // Iterate recursively using RecursiveIteratorIterator $it = new RecursiveIteratorIterator( $container, RecursiveIteratorIterator::SELF_FIRST ); // Output: Page 1, Page 2, Page 2.1, Page 2.2, Page 3 foreach ($it as $page) { echo $page-&gt;label; } Other operations hasPage hasPage(AbstractPage $page) : bool Check if the container has the given page. hasPages hasPages() : bool Checks if there are any pages in the container, and is equivalent to count($container) &gt; 0 . toArray toArray() : array Converts the container and the pages in it to a (nested) array. This can be useful for serializing and debugging. use Laminas\\Navigation\\Navigation; $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 2.1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2.2', 'uri' =&gt; '#', ], ], ], ]); var_dump($container-&gt;toArray()); /* Output: array(2) { [0]=&gt; array(15) { [\"label\"]=&gt; string(6) \"Page 1\" [\"id\"]=&gt; NULL [\"class\"]=&gt; NULL [\"title\"]=&gt; NULL [\"target\"]=&gt; NULL [\"rel\"]=&gt; array(0) { } [\"rev\"]=&gt; array(0) { } [\"order\"]=&gt; NULL [\"resource\"]=&gt; NULL [\"privilege\"]=&gt; NULL [\"active\"]=&gt; bool(false) [\"visible\"]=&gt; bool(true) [\"type\"]=&gt; string(23) \"Laminas\\Navigation\\Page\\Uri\" [\"pages\"]=&gt; array(0) { } [\"uri\"]=&gt; string(1) \"#\" } [1]=&gt; array(15) { [\"label\"]=&gt; string(6) \"Page 2\" [\"id\"]=&gt; NULL [\"class\"]=&gt; NULL [\"title\"]=&gt; NULL [\"target\"]=&gt; NULL [\"rel\"]=&gt; array(0) { } [\"rev\"]=&gt; array(0) { } [\"order\"]=&gt; NULL [\"resource\"]=&gt; NULL [\"privilege\"]=&gt; NULL [\"active\"]=&gt; bool(false) [\"visible\"]=&gt; bool(true) [\"type\"]=&gt; string(23) \"Laminas\\Navigation\\Page\\Uri\" [\"pages\"]=&gt; array(2) { [0]=&gt; array(15) { [\"label\"]=&gt; string(8) \"Page 2.1\" [\"id\"]=&gt; NULL [\"class\"]=&gt; NULL [\"title\"]=&gt; NULL [\"target\"]=&gt; NULL [\"rel\"]=&gt; array(0) { } [\"rev\"]=&gt; array(0) { } [\"order\"]=&gt; NULL [\"resource\"]=&gt; NULL [\"privilege\"]=&gt; NULL [\"active\"]=&gt; bool(false) [\"visible\"]=&gt; bool(true) [\"type\"]=&gt; string(23) \"Laminas\\Navigation\\Page\\Uri\" [\"pages\"]=&gt; array(0) { } [\"uri\"]=&gt; string(1) \"#\" } [1]=&gt; array(15) { [\"label\"]=&gt; string(8) \"Page 2.2\" [\"id\"]=&gt; NULL [\"class\"]=&gt; NULL [\"title\"]=&gt; NULL [\"target\"]=&gt; NULL [\"rel\"]=&gt; array(0) { } [\"rev\"]=&gt; array(0) { } [\"order\"]=&gt; NULL [\"resource\"]=&gt; NULL [\"privilege\"]=&gt; NULL [\"active\"]=&gt; bool(false) [\"visible\"]=&gt; bool(true) [\"type\"]=&gt; string(23) \"Laminas\\Navigation\\Page\\Uri\" [\"pages\"]=&gt; array(0) { } [\"uri\"]=&gt; string(1) \"#\" } } [\"uri\"]=&gt; string(1) \"#\" } } */","title":"Containers"},{"location":"containers/#containers","text":"Containers have methods for adding, retrieving, deleting, and iterating pages. Containers implement the SPL interfaces RecursiveIterator and Countable , meaning that a container can be iterated using the SPL RecursiveIteratorIterator class.","title":"Containers"},{"location":"containers/#creating-containers","text":"Laminas\\Navigation\\AbstractContainer can not be instantiated directly. Use Laminas\\Navigation\\Navigation if you want to instantiate a container. Laminas\\Navigation\\Navigation can be constructed entirely empty, or take an array or a Traversable object with pages to put in the container. Each page provided via options will eventually be passed to the addPage() method of the container class, which means that each element in the options can be also be an array, Traversable object, or a Laminas\\Navigation\\Page\\AbstractPage instance.","title":"Creating containers"},{"location":"containers/#adding-pages","text":"Adding pages to a container can be done with the methods addPage() , addPages() , or setPages() . See examples below for explanation. use Laminas\\Config\\Config; use Laminas\\Navigation\\Navigation; use Laminas\\Navigation\\Page\\AbstractPage; // create container $container = new Navigation(); // add page by giving a page instance $container-&gt;addPage(AbstractPage::factory([ 'uri' =&gt; 'http://www.example.com/', ]]); // add page by giving an array $container-&gt;addPage([ 'uri' =&gt; 'http://www.example.com/', ]); // add page by giving a Traversable object; in this case, a laminas-config // instance. $container-&gt;addPage(Config([ 'uri' =&gt; 'http://www.example.com/', ])); $pages = [ [ 'label' =&gt; 'Save', 'action' =&gt; 'save', ], [ 'label' =&gt; 'Delete', 'action' =&gt; 'delete', ], ]; // add two pages $container-&gt;addPages($pages); // remove existing pages and add the given pages $container-&gt;setPages($pages);","title":"Adding pages"},{"location":"containers/#removing-pages","text":"Removing pages can be done with removePage() or removePages() . removePage() accepts an instance of a page or an integer. Integer arguments correspond to the order a page has. removePages() will remove all pages in the container. use Laminas\\Navigation\\Navigation; $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'action' =&gt; 'page1', ], [ 'label' =&gt; 'Page 2', 'action' =&gt; 'page2', 'order' =&gt; 200, ], [ 'label' =&gt; 'Page 3', 'action' =&gt; 'page3', ], ]); // remove page by implicit page order $container-&gt;removePage(0); // removes Page 1 // remove page by instance $page3 = $container-&gt;findOneByAction('page3'); $container-&gt;removePage($page3); // removes Page 3 // remove page by explicit page order $container-&gt;removePage(200); // removes Page 2 // remove all pages $container-&gt;removePages(); // removes all pages","title":"Removing pages"},{"location":"containers/#finding-pages","text":"Containers have three finder methods for retrieving pages. Each recursively searches the container testing for properties with values that match the one provided. findOneBy($property, $value) : AbstractPage|null : Returns the first page found matching the criteria, or null if none was found. findAllBy($property, $value) : AbstractPage[] : Returns an array of all page instances matching the criteria. findBy($property, $value, $all = false) AbstractPage|AbstractPage[]|null : calls on one of the previous methods based on the value of $all . The finder methods can also be used magically by appending the property name to findBy , findOneBy , or findAllBy . As an example, findOneByLabel('Home') will return the first matching page with label 'Home'. Other combinations include findByLabel(...) , findOneByTitle(...) , findAllByController(...) , etc. Finder methods also work on custom properties, such as findByFoo('bar') . use Laminas\\Navigation\\Navigation; $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'uri' =&gt; 'page-1', 'foo' =&gt; 'bar', 'pages' =&gt; [ [ 'label' =&gt; 'Page 1.1', 'uri' =&gt; 'page-1.1', 'foo' =&gt; 'bar', ], [ 'label' =&gt; 'Page 1.2', 'uri' =&gt; 'page-1.2', 'class' =&gt; 'my-class', ], [ 'type' =&gt; 'uri', 'label' =&gt; 'Page 1.3', 'uri' =&gt; 'page-1.3', 'action' =&gt; 'about', ], ], ], [ 'label' =&gt; 'Page 2', 'id' =&gt; 'page_2_and_3', 'class' =&gt; 'my-class', 'module' =&gt; 'page2', 'controller' =&gt; 'index', 'action' =&gt; 'page1', ], [ 'label' =&gt; 'Page 3', 'id' =&gt; 'page_2_and_3', 'module' =&gt; 'page3', 'controller' =&gt; 'index', ], ]); // The 'id' is not required to be unique, but be aware that // having two pages with the same id will render the same id attribute // in menus and breadcrumbs. // Returns \"Page 2\": $found = $container-&gt;findBy('id', 'page_2_and_3'); // Returns \"Page 2\": $found = $container-&gt;findOneBy('id', 'page_2_and_3'); // Returns \"Page 2\" AND \"Page 3\": $found = $container-&gt;findBy('id', 'page_2_and_3', true); // Returns \"Page 2\": $found = $container-&gt;findById('page_2_and_3'); // Returns \"Page 2\": $found = $container-&gt;findOneById('page_2_and_3'); // Returns \"Page 2\" AND \"Page 3\": $found = $container-&gt;findAllById('page_2_and_3'); // Find all pages matching the CSS class \"my-class\": // Returns \"Page 1.2\" and \"Page 2\": $found = $container-&gt;findAllBy('class', 'my-class'); $found = $container-&gt;findAllByClass('my-class'); // Find first page matching CSS class \"my-class\": // Returns \"Page 1.2\": $found = $container-&gt;findOneByClass('my-class'); // Find all pages matching the CSS class \"non-existent\": // Returns an empty array. $found = $container-&gt;findAllByClass('non-existent'); // Find first page matching the CSS class \"non-existent\": // Returns null. $found = $container-&gt;findOneByClass('non-existent'); // Find all pages with custom property 'foo' = 'bar': // Returns \"Page 1\" and \"Page 1.1\": $found = $container-&gt;findAllBy('foo', 'bar'); // To achieve the same magically, 'foo' must be in lowercase. // This is because 'foo' is a custom property, and thus the // property name is not normalized to 'Foo': $found = $container-&gt;findAllByfoo('bar'); // Find all with controller = 'index': // Returns \"Page 2\" and \"Page 3\": $found = $container-&gt;findAllByController('index');","title":"Finding pages"},{"location":"containers/#iterating-containers","text":"Laminas\\Navigation\\AbstractContainer implements RecursiveIterator . iterate a container recursively, use the RecursiveIteratorIterator class. use RecursiveIteratorIterator; use Laminas\\Navigation\\Navigation; /* * Create a container from an array */ $container = new Navigation([ [ 'label' =&gt; 'Page 1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2', 'uri' =&gt; '#', 'pages' =&gt; [ [ 'label' =&gt; 'Page 2.1', 'uri' =&gt; '#', ], [ 'label' =&gt; 'Page 2.2', 'uri' =&gt; '#', ], ], ], [ 'label' =&gt; 'Page 3', 'uri' =&gt; '#', ], ]); // Iterate flat using regular foreach: // Output: Page 1, Page 2, Page 3 foreach ($container as $page) { echo $page-&gt;label; } // Iterate recursively using RecursiveIteratorIterator $it = new RecursiveIteratorIterator( $container, RecursiveIteratorIterator::SELF_FIRST ); // Output: Page 1, Page 2, Page 2.1, Page 2.2, Page 3 foreach ($it as $page) { echo $page-&gt;label; }","title":"Iterating containers"},{"location":"containers/#other-operations","text":"","title":"Other operations"},{"location":"installation/","text":"This is only a placeholder The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"installation/#this-is-only-a-placeholder","text":"The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"This is only a placeholder"},{"location":"intro/","text":"Introduction laminas-navigation manages trees of pointers to web pages. Simply put: It can be used for creating menus, breadcrumbs, links, and sitemaps, or serve as a model for other navigation related purposes. Pages and Containers There are two main concepts in laminas-navigation: pages and containers. Pages A page ( Laminas\\Navigation\\AbstractPage ) in laminas-navigation, in its most basic form, is an object that holds a pointer to a web page. In addition to the pointer itself, the page object contains a number of other properties that are typically relevant for navigation, such as label , title , etc. Read more about pages in the pages section. Containers A navigation container ( Laminas\\Navigation\\AbstractContainer ) holds pages. It has methods for adding, retrieving, deleting and iterating pages. It implements the SPL interfaces RecursiveIterator and Countable , and can thus be iterated with SPL iterators such as RecursiveIteratorIterator . Read more about containers in the containers section. Pages are containers Laminas\\Navigation\\AbstractPage extends Laminas\\Navigation\\AbstractContainer , which means that a page can have sub pages. View Helpers Separation of data (model) and rendering (view) Classes in the laminas-navigation namespace do not deal with rendering of navigational elements. Rendering is done with navigational view helpers. However, pages contain information that is used by view helpers when rendering, such as label , class (CSS), title , lastmod , and priority properties for sitemaps, etc. Read more about rendering navigational elements in the view helpers section.","title":"Introduction"},{"location":"intro/#introduction","text":"laminas-navigation manages trees of pointers to web pages. Simply put: It can be used for creating menus, breadcrumbs, links, and sitemaps, or serve as a model for other navigation related purposes.","title":"Introduction"},{"location":"intro/#pages-and-containers","text":"There are two main concepts in laminas-navigation: pages and containers.","title":"Pages and Containers"},{"location":"intro/#view-helpers","text":"","title":"View Helpers"},{"location":"pages/","text":"Pages laminas-navigation ships with two page types: MVC pages , using the class Laminas\\Navigation\\Page\\Mvc URI pages , using the class Laminas\\Navigation\\Page\\Uri MVC pages link to on-site web pages, and are defined using MVC parameters ( action , controller , route , params ). URI pages are defined by a single property uri , which give you the full flexibility to link off-site pages or do other things with the generated links (e.g. a URI that turns into &lt;a href=\"#\"&gt;foo&lt;a&gt; ). Common page features All page classes must extend Laminas\\Navigation\\Page\\AbstractPage , and will thus share a common set of features and properties. Most notably, they share the options in the table below and the same initialization process. Option keys are mapped to set*() methods. This means that the option order maps to the method setOrder() , and reset_params maps to the method setResetParams() . If there is no setter method for the option, it will be set as a custom property of the page. Read more on extending Laminas\\Navigation\\Page\\AbstractPage in the section \"Creating custom page types\" . Common page options Key Type Default Description label string NULL A page label, such as 'Home' or 'Blog'. fragment string\\|null NULL A fragment identifier (anchor identifier) pointing to an anchor within a resource that is subordinate to another, primary resource. The fragment identifier introduced by a hash mark \"#\". Example: http://www.example.org/foo.html#bar ( bar is the fragment identifier) id string\\|integer NULL An id tag/attribute that may be used when rendering the page, typically in an anchor element. class string NULL A CSS class that may be used when rendering the page, typically in an anchor element. title string NULL A short page description, typically for using as the title attribute in an anchor. target string NULL Specifies a target that may be used for the page, typically in an anchor element. rel array [] Specifies forward relations for the page. Each element in the array is a key-value pair, where the key designates the relation/link type, and the value is a pointer to the linked page. An example of a key-value pair is 'alternate' =&gt; 'format/plain.html' . To allow full flexibility, there are no restrictions on relation values. The value does not have to be a string. Read more about rel and rev in the section on the Links helper. rev array [] Specifies reverse relations for the page. Works exactly like rel. order string\\|integer\\|null NULL Works like order for elements in Laminas\\Form . If specified, the page will be iterated in a specific order, meaning you can force a page to be iterated before others by setting the order attribute to a low number, e.g. -100. If a String is given, it must parse to a valid int. If NULL is given, it will be reset, meaning the order in which the page was added to the container will be used. resource string\\|Laminas\\Permissions\\Acl\\Resource\\ResourceInterface\\|null NULL ACL resource to associate with the page. Read more in the section on ACL integration in view helpers. privilege string\\|null NULL ACL privilege to associate with the page. Read more in the section on ACL integration in view helpers. active boolean FALSE Whether the page should be considered active for the current request. If active is FALSE or not given, MVC pages will check its properties against the request object upon calling $page-&gt;isActive() . visible boolean TRUE Whether page should be visible for the user, or just be a part of the structure. Invisible pages are skipped by view helpers. pages array\\|Travsersable\\|null NULL Child pages of the page. This could be an array or Traversable object containing either page options that can be passed to the factory() method, AbstractPage instances, or a mixture of both. Custom properties All pages support setting and retrieval of custom properties by use of the magic methods __set($name, $value) , __get($name) , __isset($name) and __unset($name) . Custom properties may have any value, and will be included in the array that is returned from $page-&gt;toArray() , which means that pages can be serialized/deserialized successfully even if the pages contains properties that are not native in the page class. Both native and custom properties can be set using $page-&gt;set($name, $value) and retrieved using $page-&gt;get($name) , or by using magic methods. The following example demonstrates custom properties: $page = new Laminas\\Navigation\\Page\\Mvc(); $page-&gt;foo = 'bar'; $page-&gt;meaning = 42; echo $page-&gt;foo; if ($page-&gt;meaning != 42) { // action should be taken } MVC pages MVC pages are defined using MVC parameters known from the laminas-mvc component. An MVC page will use Laminas\\Router\\RouteStackInterface internally in the getHref() method to generate href attributes, and the isActive() method will compare the Laminas\\Router\\RouteMatch params with the page's params to determine if the page is active. useRouteMatch flag Starting in version 2.2.0, if you want to re-use any matched route parameters when generating a link, you can do so via the useRouteMatch flag. This is particularly useful when creating segment routes that include the currently selected language or locale as an initial segment, as it ensures the links generated all include the matched value. MVC page options Key Type Default Description action string NULL Action name to use when generating href to the page. controller string NULL Controller name to use when generating href to the page. params array [] User params to use when generating href to the page. route string NULL Route name to use when generating href to the page. routeMatch Laminas\\Router\\RouteMatch NULL RouteInterface matches used for routing parameters and testing validity. useRouteMatch boolean FALSE If true, then the getHref() method will use the routeMatch parameters to assemble the URI. router Laminas\\Router\\RouteStackInterface NULL Router for assembling URLs. query array [] Query string arguments to use when generating href to page. URIs are relative to base URL The URI returned is relative to the baseUrl in Laminas\\Router\\Http\\TreeRouteStack . In the examples, the baseUrl is '/' for simplicity. getHref() generates the page URI This example demonstrates that MVC pages use Laminas\\Router\\RouteStackInterface internally to generate URIs when calling $page-&gt;getHref() . use Laminas\\Navigation\\Page; use Laminas\\Router\\Http\\Segment; use Laminas\\Router\\Http\\TreeRouteStack; // Create route $route = Segment::factory([ 'route' =&gt; '/[:controller[/:action][/:id]]', 'constraints' =&gt; [ 'controller' =&gt; '[a-zA-Z][a-zA-Z0-9_-]+', 'action' =&gt; '[a-zA-Z][a-zA-Z0-9_-]+', 'id' =&gt; '[0-9]+', ], [ 'controller' =&gt; 'Album\\Controller\\Album', 'action' =&gt; 'index', ] ]); $router = new TreeRouteStack(); $router-&gt;addRoute('default', $route); // getHref() returns /album/add $page = new Page\\Mvc([ 'action' =&gt; 'add', 'controller' =&gt; 'album', ]); // getHref() returns /album/edit/1337 $page = new Page\\Mvc([ 'action' =&gt; 'edit', 'controller' =&gt; 'album', 'params' =&gt; ['id' =&gt; 1337], ]); // getHref() returns /album/1337?format=json $page = new Page\\Mvc([ 'action' =&gt; 'edit', 'controller' =&gt; 'album', 'params' =&gt; ['id' =&gt; 1337], 'query' =&gt; ['format' =&gt; 'json'], ]); isActive() determines if page is active This example demonstrates that MVC pages determine whether they are active by using the params found in the route match object. use Laminas\\Navigation\\Page; /** * Dispatched request: * - controller: album * - action: index */ $page1 = new Page\\Mvc([ 'action' =&gt; 'index', 'controller' =&gt; 'album', ]); $page2 = new Page\\Mvc([ 'action' =&gt; 'edit', 'controller' =&gt; 'album', ]); $page1-&gt;isActive(); // returns true $page2-&gt;isActive(); // returns false /** * Dispatched request: * - controller: album * - action: edit * - id: 1337 */ $page = new Page\\Mvc([ 'action' =&gt; 'edit', 'controller' =&gt; 'album', 'params' =&gt; ['id' =&gt; 1337], ]); // returns true, because request has the same controller and action $page-&gt;isActive(); /** * Dispatched request: * - controller: album * - action: edit */ $page = new Page\\Mvc([ 'action' =&gt; 'edit', 'controller' =&gt; 'album', 'params' =&gt; ['id' =&gt; null], ]); // returns false, because page requires the id param to be set in the request $page-&gt;isActive(); // returns false Using routes Routes can be used with MVC pages. If a page has a route, this route will be used in getHref() to generate the URL for the page. Default parameters are not necessary Note that when using the route property in a page, you do not need to specify the default params that the route defines (controller, action, etc.). use Laminas\\Navigation\\Page; use Laminas\\Router\\Http\\Segment; use Laminas\\Router\\Http\\TreeRouteStack; // the following route is added to the Laminas router $route = Segment::factory([ 'route' =&gt; '/a/:id', 'constraints' =&gt; [ 'id' =&gt; '[0-9]+', ], [ 'controller' =&gt; 'Album\\Controller\\Album', 'action' =&gt; 'show', ] ]); $router = new TreeRouteStack(); $router-&gt;addRoute('albumShow', $route); // a page is created with a 'route' option $page = new Page\\Mvc([ 'label' =&gt; 'Show album', 'route' =&gt; 'albumShow', 'params' =&gt; ['id' =&gt; 42] ]); // returns: /a/42 $page-&gt;getHref(); URI Pages Pages of type Laminas\\Navigation\\Page\\Uri can be used to link to pages on other domains or sites, or to implement custom logic for the page. In addition to the common page options, a URI page takes only one additional option, a uri . The uri will be returned when calling $page-&gt;getHref() , and may be a string or null . No auto-determination of active status Laminas\\Navigation\\Page\\Uri will not try to determine whether it should be active when calling $page-&gt;isActive() ; it merely returns what currently is set. In order to make a URI page active, you must manually call $page-&gt;setActive() or specify the active as a page option during instantiation. URI page options Key Type Default Description uri string NULL URI to page. This can be any string or NULL . Creating custom page types When extending Laminas\\Navigation\\Page\\AbstractPage , there is usually no need to override the constructor or the setOptions() method. The page constructor takes a single parameter, an array or a Traversable object, which is then passed to setOptions() . That method will in turn call the appropriate set*() methods based on the options provided, which in turn maps the option to native or custom properties. If the option internal_id is given, the method will first look for a method named setInternalId() , and pass the option to this method if it exists. If the method does not exist, the option will be set as a custom property of the page, and be accessible via $internalId = $page-&gt;internal_id; or $internalId = $page-&gt;get('internal_id'); . Basic custom page example The only thing a custom page class needs to implement is the getHref() method. namespace My; use Laminas\\Navigation\\Page\\AbstractPage; class Page extends AbstractPage { public function getHref() { return 'something-completely-different'; } } A custom page with properties When adding properties to an extended page, there is no need to override/modify setOptions() . namespace My\\Navigation; use Laminas\\Navigation\\Page\\AbstractPage; class Page extends AbstractPage { protected $foo; protected $fooBar; public function setFoo($foo) { $this-&gt;foo = $foo; } public function getFoo() { return $this-&gt;foo; } public function setFooBar($fooBar) { $this-&gt;fooBar = $fooBar; } public function getFooBar() { return $this-&gt;fooBar; } public function getHref() { return sprintf('%s/%s', $this-&gt;foo, $this-&gt;fooBar); } } // Instantiation: $page = new Page([ 'label' =&gt; 'Property names are mapped to setters', 'foo' =&gt; 'bar', 'foo_bar' =&gt; 'baz', ]); Creating pages using the page factory All pages (also custom classes), can be created using the page factory, Laminas\\Navigation\\Page\\AbstractPage::factory() . The factory accepts either an array or Traversable set of options. Each key in the options corresponds to a page option, as seen earlier. If the option uri is given and no MVC options are provided (e.g., action , controller , route ), a URI page will be created. If any of the MVC options are given, an MVC page will be created. If type is given, the factory will assume the value to be the name of the class that should be created. If the value is mvc or uri , an MVC or URI page will be created, respectively. Creating an MVC page using the page factory use Laminas\\Navigation\\Page\\AbstractPage; // MVC page, as \"action\" is defined $page = AbstractPage::factory([ 'label' =&gt; 'My MVC page', 'action' =&gt; 'index', ]); // MVC page, as \"action\" and \"controller\" are defined $page = AbstractPage::factory([ 'label' =&gt; 'Search blog', 'action' =&gt; 'index', 'controller' =&gt; 'search', ]); // MVC page, as \"route\" is defined $page = AbstractPage::factory([ 'label' =&gt; 'Home', 'route' =&gt; 'home', ]); // MVC page, as \"type\" is \"mvc\" $page = AbstractPage::factory([ 'type' =&gt; 'mvc', 'label' =&gt; 'My MVC page', ]); Creating a URI page using the page factory use Laminas\\Navigation\\Page\\AbstractPage; // URI page, as \"uri\" is present, with now MVC options $page = AbstractPage::factory([ 'label' =&gt; 'My URI page', 'uri' =&gt; 'http://www.example.com/', ]); // URI page, as \"uri\" is present, with now MVC options $page = AbstractPage::factory([ 'label' =&gt; 'Search', 'uri' =&gt; 'http://www.example.com/search', 'active' =&gt; true, ]); // URI page, as \"uri\" is present, with now MVC options $page = AbstractPage::factory([ 'label' =&gt; 'My URI page', 'uri' =&gt; '#', ]); // URI page, as \"type\" is \"uri\" $page = AbstractPage::factory([ 'type' =&gt; 'uri', 'label' =&gt; 'My URI page', ]); Creating a custom page type using the page factory To create a custom page type using the factory, use the option type to specify a class name to instantiate. namespace My\\Navigation; use Laminas\\Navigation\\Page\\AbstractPage; class Page extends AbstractPage { protected $fooBar = 'ok'; public function setFooBar($fooBar) { $this-&gt;fooBar = $fooBar; } } // Creates Page instance, as \"type\" refers to its class. $page = AbstractPage::factory([ 'type' =&gt; Page::class, 'label' =&gt; 'My custom page', 'foo_bar' =&gt; 'foo bar', ]);","title":"Pages"},{"location":"pages/#pages","text":"laminas-navigation ships with two page types: MVC pages , using the class Laminas\\Navigation\\Page\\Mvc URI pages , using the class Laminas\\Navigation\\Page\\Uri MVC pages link to on-site web pages, and are defined using MVC parameters ( action , controller , route , params ). URI pages are defined by a single property uri , which give you the full flexibility to link off-site pages or do other things with the generated links (e.g. a URI that turns into &lt;a href=\"#\"&gt;foo&lt;a&gt; ).","title":"Pages"},{"location":"pages/#common-page-features","text":"All page classes must extend Laminas\\Navigation\\Page\\AbstractPage , and will thus share a common set of features and properties. Most notably, they share the options in the table below and the same initialization process. Option keys are mapped to set*() methods. This means that the option order maps to the method setOrder() , and reset_params maps to the method setResetParams() . If there is no setter method for the option, it will be set as a custom property of the page. Read more on extending Laminas\\Navigation\\Page\\AbstractPage in the section \"Creating custom page types\" .","title":"Common page features"},{"location":"pages/#mvc-pages","text":"MVC pages are defined using MVC parameters known from the laminas-mvc component. An MVC page will use Laminas\\Router\\RouteStackInterface internally in the getHref() method to generate href attributes, and the isActive() method will compare the Laminas\\Router\\RouteMatch params with the page's params to determine if the page is active.","title":"MVC pages"},{"location":"pages/#uri-pages","text":"Pages of type Laminas\\Navigation\\Page\\Uri can be used to link to pages on other domains or sites, or to implement custom logic for the page. In addition to the common page options, a URI page takes only one additional option, a uri . The uri will be returned when calling $page-&gt;getHref() , and may be a string or null .","title":"URI Pages"},{"location":"pages/#creating-custom-page-types","text":"When extending Laminas\\Navigation\\Page\\AbstractPage , there is usually no need to override the constructor or the setOptions() method. The page constructor takes a single parameter, an array or a Traversable object, which is then passed to setOptions() . That method will in turn call the appropriate set*() methods based on the options provided, which in turn maps the option to native or custom properties. If the option internal_id is given, the method will first look for a method named setInternalId() , and pass the option to this method if it exists. If the method does not exist, the option will be set as a custom property of the page, and be accessible via $internalId = $page-&gt;internal_id; or $internalId = $page-&gt;get('internal_id'); .","title":"Creating custom page types"},{"location":"pages/#creating-pages-using-the-page-factory","text":"All pages (also custom classes), can be created using the page factory, Laminas\\Navigation\\Page\\AbstractPage::factory() . The factory accepts either an array or Traversable set of options. Each key in the options corresponds to a page option, as seen earlier. If the option uri is given and no MVC options are provided (e.g., action , controller , route ), a URI page will be created. If any of the MVC options are given, an MVC page will be created. If type is given, the factory will assume the value to be the name of the class that should be created. If the value is mvc or uri , an MVC or URI page will be created, respectively.","title":"Creating pages using the page factory"},{"location":"quick-start/","text":"Quick Start Usage in a laminas-mvc-based application The fastest way to get up and running with laminas-navigation is: Register laminas-navigation as module. Define navigation container configuration under the top-level navigation key in your application configuration. Render your container using a navigation view helper within your view scripts. Register laminas-navigation as module Edit the application configuration file config/application.config.php : &lt;?php return [ 'modules' =&gt; [ 'Laminas\\Router', 'Laminas\\Log', 'Laminas\\Navigation', // &lt;-- Add this line // ... ], ]; Navigation container configuration Add the container definition to your configuration file, e.g. config/autoload/global.php : &lt;?php return [ // ... 'navigation' =&gt; [ 'default' =&gt; [ [ 'label' =&gt; 'Home', 'route' =&gt; 'home', ], [ 'label' =&gt; 'Page #1', 'route' =&gt; 'page-1', 'pages' =&gt; [ [ 'label' =&gt; 'Child #1', 'route' =&gt; 'page-1-child', ], ], ], [ 'label' =&gt; 'Page #2', 'route' =&gt; 'page-2', ], ], ], // ... ]; Render the navigation Calling the view helper for menus in your layout script: &lt;!-- ... --&gt; &lt;body&gt; &lt;?= $this-&gt;navigation('default')-&gt;menu() ?&gt; &lt;/body&gt; &lt;!-- ... --&gt; Using multiple navigations Once the laminas-navigation module is registered, you can create as many navigation definitions as you wish, and the underlying factories will create navigation containers automatically. Add the container definitions to your configuration file, e.g. config/autoload/global.php : &lt;?php return [ // ... 'navigation' =&gt; [ // Navigation with name default 'default' =&gt; [ [ 'label' =&gt; 'Home', 'route' =&gt; 'home', ], [ 'label' =&gt; 'Page #1', 'route' =&gt; 'page-1', 'pages' =&gt; [ [ 'label' =&gt; 'Child #1', 'route' =&gt; 'page-1-child', ], ], ], [ 'label' =&gt; 'Page #2', 'route' =&gt; 'page-2', ], ], // Navigation with name special 'special' =&gt; [ [ 'label' =&gt; 'Special', 'route' =&gt; 'special', ], [ 'label' =&gt; 'Special Page #2', 'route' =&gt; 'special-2', ], ], // Navigation with name sitemap 'sitemap' =&gt; [ [ 'label' =&gt; 'Sitemap', 'route' =&gt; 'sitemap', ], [ 'label' =&gt; 'Sitemap Page #2', 'route' =&gt; 'sitemap-2', ], ], ], // ... ]; Container names have a prefix There is one important point to know when using laminas-navigation as a module: The name of the container in your view script must be prefixed with Laminas\\Navigation\\ , followed by the name of the configuration key. This helps ensure that no naming collisions occur with other services. The following example demonstrates rendering the navigation menus for the named default , special , and sitemap containers. &lt;!-- ... --&gt; &lt;body&gt; &lt;?= $this-&gt;navigation('Laminas\\Navigation\\Default')-&gt;menu() ?&gt; &lt;?= $this-&gt;navigation('Laminas\\Navigation\\Special')-&gt;menu() ?&gt; &lt;?= $this-&gt;navigation('Laminas\\Navigation\\Sitemap')-&gt;menu() ?&gt; &lt;/body&gt; &lt;!-- ... --&gt;","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"quick-start/#usage-in-a-laminas-mvc-based-application","text":"The fastest way to get up and running with laminas-navigation is: Register laminas-navigation as module. Define navigation container configuration under the top-level navigation key in your application configuration. Render your container using a navigation view helper within your view scripts.","title":"Usage in a laminas-mvc-based application"},{"location":"quick-start/#using-multiple-navigations","text":"Once the laminas-navigation module is registered, you can create as many navigation definitions as you wish, and the underlying factories will create navigation containers automatically. Add the container definitions to your configuration file, e.g. config/autoload/global.php : &lt;?php return [ // ... 'navigation' =&gt; [ // Navigation with name default 'default' =&gt; [ [ 'label' =&gt; 'Home', 'route' =&gt; 'home', ], [ 'label' =&gt; 'Page #1', 'route' =&gt; 'page-1', 'pages' =&gt; [ [ 'label' =&gt; 'Child #1', 'route' =&gt; 'page-1-child', ], ], ], [ 'label' =&gt; 'Page #2', 'route' =&gt; 'page-2', ], ], // Navigation with name special 'special' =&gt; [ [ 'label' =&gt; 'Special', 'route' =&gt; 'special', ], [ 'label' =&gt; 'Special Page #2', 'route' =&gt; 'special-2', ], ], // Navigation with name sitemap 'sitemap' =&gt; [ [ 'label' =&gt; 'Sitemap', 'route' =&gt; 'sitemap', ], [ 'label' =&gt; 'Sitemap Page #2', 'route' =&gt; 'sitemap-2', ], ], ], // ... ];","title":"Using multiple navigations"},{"location":"cookbook/mvc-sitemap/","text":"How to Create a XML Sitemap in a Mvc-Based Application? The following example shows one potential use case to render a XML sitemap within a laminas-mvc based application. The example uses a middleware as request handler and the Sitemap view helper . The example is based on the laminas-mvc skeleton application . Before starting, make sure laminas-navigation is installed and configured and also laminas-mvc-middleware . Create Navigation Container Configuration Add a container definition for the navigation to the configuration, e.g. config/autoload/global.php : return [ 'navigation' =&gt; [ 'default' =&gt; [ [ 'label' =&gt; 'Home', 'route' =&gt; 'home', ], [ 'label' =&gt; 'Another page', 'route' =&gt; 'application', ], ], ], // … ]; Create Request Handler The Sitemap helper already creates all the XML content, so the rendering of the view layer can be omitted. With the custom response type Laminas\\Diactoros\\Response\\XmlResponse the Content-Type header is set to application/xml . Create a middleware class as request handler and inject the Sitemap helper via the constructor, e.g. module/Application/Handler/SitemapHandler.php : namespace Application\\Handler; use Laminas\\Diactoros\\Response\\XmlResponse; use Laminas\\View\\Helper\\Navigation\\Sitemap; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class SitemapHandler implements RequestHandlerInterface { private Sitemap $sitemapHelper; public function __construct(Sitemap $sitemapHelper) { $this-&gt;sitemapHelper = $sitemapHelper; } public function handle(ServerRequestInterface $request): ResponseInterface { return new XmlResponse( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;render() ); } } Create Factory for Request Handler Fetch the Navigation Proxy helper from the view helper manager and fetch the Sitemap helper from Proxy helper in a factory class , e.g. src/Application/Handler/SitemapHandlerFactory.php : namespace Application\\Handler; use Laminas\\View\\Helper\\Navigation as NavigationProxyHelper; use Laminas\\View\\Helper\\Navigation\\Sitemap; use Laminas\\View\\HelperPluginManager; use Psr\\Container\\ContainerInterface; class SitemapHandlerFactory { public function __invoke(ContainerInterface $container): SitemapHandler { // View helper manager /** @var HelperPluginManager $viewHelperPluginManager */ $viewHelperPluginManager = $container-&gt;get('ViewHelperManager'); // Navigation view helper /** @var NavigationProxyHelper $navigationHelper */ $navigationHelper = $viewHelperPluginManager-&gt;get( NavigationProxyHelper::class ); // Sitemap view helper /** @var Sitemap $sitemapHelper */ $sitemapHelper = $navigationHelper-&gt;findHelper(Sitemap::class); return new SitemapHandler($sitemapHelper); } } Register Middleware and Create Route To register the middleware for the application and to create the route , extend the configuration of the module. Add the following lines to the module configuration file, e.g. module/Application/config/module.config.php : namespace Application; use Laminas\\Mvc\\Middleware\\PipeSpec; use Laminas\\Router\\Http\\Literal; return [ 'service_manager' =&gt; [ 'factories' =&gt; [ // Add this line Handler\\SitemapHandler::class =&gt; Handler\\SitemapHandlerFactory::class, ], ], 'router' =&gt; [ 'routes' =&gt; [ // Add following array 'sitemap' =&gt; [ 'type' =&gt; Literal::class, 'options' =&gt; [ 'route' =&gt; '/sitemap.xml', 'defaults' =&gt; [ 'controller' =&gt; PipeSpec::class, 'middleware' =&gt; Handler\\SitemapHandler::class, ], ], ], // … ], ], // … ]; Render Sitemap To render the sitemap, open a browser, e.g. http://localhost:8080/sitemap.xml : &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;&lt;url&gt;&lt;loc&gt;http://localhost:8080/&lt;/loc&gt;&lt;/url&gt;&lt;url&gt;&lt;loc&gt;http://localhost:8080/application&lt;/loc&gt;&lt;/url&gt;&lt;/urlset&gt; To format the output, which is useful for better reading only for humans, use the setFormatOutput method of the view helper: return new XmlResponse( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;setFormatOutput()-&gt;render() ); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://localhost:8080/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://localhost:8080/application&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt; Using a Controller This all works with a classic controller as well. The Sitemap helper already creates all the XML content, so the rendering of the view layer can be also omitted here: Get the response object of the controller Set the HTTP header for XML content Set the rendered sitemap as content Return the response object for controller action namespace Application\\Controller; use Laminas\\Http\\Response; use Laminas\\Mvc\\Controller\\AbstractActionController; use Laminas\\View\\Helper\\Navigation\\Sitemap; class IndexController extends AbstractActionController { private Sitemap $sitemapHelper; public function __construct(Sitemap $sitemapHelper) { $this-&gt;sitemapHelper = $sitemapHelper; } public function sitemapAction(): Response { /** @var Response $response */ $response = $this-&gt;getResponse(); // Set HTTP header for XML content type $response-&gt;setHeaders( $response-&gt;getHeaders()-&gt;addHeaderLine( 'Content-Type', 'application/xml; charset=utf-8' ) ); // Render sitemap and set as content $response-&gt;setContent( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;render() ); // Return HTTP response return $response; } }","title":"How to Create a XML Sitemap in a Mvc-Based Application?"},{"location":"cookbook/mvc-sitemap/#how-to-create-a-xml-sitemap-in-a-mvc-based-application","text":"The following example shows one potential use case to render a XML sitemap within a laminas-mvc based application. The example uses a middleware as request handler and the Sitemap view helper . The example is based on the laminas-mvc skeleton application . Before starting, make sure laminas-navigation is installed and configured and also laminas-mvc-middleware .","title":"How to Create a XML Sitemap in a Mvc-Based Application?"},{"location":"cookbook/mvc-sitemap/#create-navigation-container-configuration","text":"Add a container definition for the navigation to the configuration, e.g. config/autoload/global.php : return [ 'navigation' =&gt; [ 'default' =&gt; [ [ 'label' =&gt; 'Home', 'route' =&gt; 'home', ], [ 'label' =&gt; 'Another page', 'route' =&gt; 'application', ], ], ], // … ];","title":"Create Navigation Container Configuration"},{"location":"cookbook/mvc-sitemap/#create-request-handler","text":"The Sitemap helper already creates all the XML content, so the rendering of the view layer can be omitted. With the custom response type Laminas\\Diactoros\\Response\\XmlResponse the Content-Type header is set to application/xml . Create a middleware class as request handler and inject the Sitemap helper via the constructor, e.g. module/Application/Handler/SitemapHandler.php : namespace Application\\Handler; use Laminas\\Diactoros\\Response\\XmlResponse; use Laminas\\View\\Helper\\Navigation\\Sitemap; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class SitemapHandler implements RequestHandlerInterface { private Sitemap $sitemapHelper; public function __construct(Sitemap $sitemapHelper) { $this-&gt;sitemapHelper = $sitemapHelper; } public function handle(ServerRequestInterface $request): ResponseInterface { return new XmlResponse( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;render() ); } }","title":"Create Request Handler"},{"location":"cookbook/mvc-sitemap/#register-middleware-and-create-route","text":"To register the middleware for the application and to create the route , extend the configuration of the module. Add the following lines to the module configuration file, e.g. module/Application/config/module.config.php : namespace Application; use Laminas\\Mvc\\Middleware\\PipeSpec; use Laminas\\Router\\Http\\Literal; return [ 'service_manager' =&gt; [ 'factories' =&gt; [ // Add this line Handler\\SitemapHandler::class =&gt; Handler\\SitemapHandlerFactory::class, ], ], 'router' =&gt; [ 'routes' =&gt; [ // Add following array 'sitemap' =&gt; [ 'type' =&gt; Literal::class, 'options' =&gt; [ 'route' =&gt; '/sitemap.xml', 'defaults' =&gt; [ 'controller' =&gt; PipeSpec::class, 'middleware' =&gt; Handler\\SitemapHandler::class, ], ], ], // … ], ], // … ];","title":"Register Middleware and Create Route"},{"location":"cookbook/mvc-sitemap/#render-sitemap","text":"To render the sitemap, open a browser, e.g. http://localhost:8080/sitemap.xml : &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;&lt;url&gt;&lt;loc&gt;http://localhost:8080/&lt;/loc&gt;&lt;/url&gt;&lt;url&gt;&lt;loc&gt;http://localhost:8080/application&lt;/loc&gt;&lt;/url&gt;&lt;/urlset&gt; To format the output, which is useful for better reading only for humans, use the setFormatOutput method of the view helper: return new XmlResponse( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;setFormatOutput()-&gt;render() ); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://localhost:8080/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://localhost:8080/application&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt;","title":"Render Sitemap"},{"location":"cookbook/mvc-sitemap/#using-a-controller","text":"This all works with a classic controller as well. The Sitemap helper already creates all the XML content, so the rendering of the view layer can be also omitted here: Get the response object of the controller Set the HTTP header for XML content Set the rendered sitemap as content Return the response object for controller action namespace Application\\Controller; use Laminas\\Http\\Response; use Laminas\\Mvc\\Controller\\AbstractActionController; use Laminas\\View\\Helper\\Navigation\\Sitemap; class IndexController extends AbstractActionController { private Sitemap $sitemapHelper; public function __construct(Sitemap $sitemapHelper) { $this-&gt;sitemapHelper = $sitemapHelper; } public function sitemapAction(): Response { /** @var Response $response */ $response = $this-&gt;getResponse(); // Set HTTP header for XML content type $response-&gt;setHeaders( $response-&gt;getHeaders()-&gt;addHeaderLine( 'Content-Type', 'application/xml; charset=utf-8' ) ); // Render sitemap and set as content $response-&gt;setContent( $this-&gt;sitemapHelper-&gt;setContainer('default')-&gt;render() ); // Return HTTP response return $response; } }","title":"Using a Controller"},{"location":"helpers/breadcrumbs/","text":"Breadcrumbs Breadcrumbs are used for indicating where in a sitemap a user is currently browsing, and are typically rendered like the following: You are here: Home &gt; Products &gt; FantasticProduct 1.0 The breadcrumbs() helper follows the Breadcrumbs Pattern as original outlined in the Yahoo! Design Pattern Library, and allows simple customization (minimum/maximum depth, indentation, separator, and whether the last element should be linked), or rendering using a partial view script. The Breadcrumbs helper finds the deepest active page in a navigation container, and renders an upwards path to the root. For MVC pages, the \"activeness\" of a page is determined by inspecting the request object, as stated in the section on MVC pages . The helper sets the minDepth property to 1 by default, meaning breadcrumbs will not be rendered if the deepest active page is a root page. If maxDepth is specified, the helper will stop rendering when at the specified depth (e.g. stop at level 2 even if the deepest active page is on level 3). Methods in the breadcrumbs helper: Method signature Description getSeparator() : string Retrieves the separator string to use between breadcrumbs; default is &gt; . setSeparator(string $separator) : self Set the separator string to use between breadcrumbs. getLinkLast() : bool Retrieve the flag indicating whether the last breadcrumb should be rendered as an anchor; defaults to false . setLinkLast(bool $flag) : self Set the flag indicating whether the last breadcrumb should be rendered as an anchor. getPartial() : string\\|array Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's render() method will use the renderPartial() method. The helper expects the partial to be a string or an array with two elements. If the partial is a string , it denotes the name of the partial script to use. If it is an array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found. setPartial(string\\|array $partial) : self Set the partial view script to use when rendering breadcrumbs; see getPartial() for acceptable values. renderStraight() The default render method used when no partial view script is present. renderPartial() Used for rendering using a partial view script. Basic usage This example shows how to render breadcrumbs with default settings. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs(); ?&gt; The call above takes advantage of the magic __toString() method, and is equivalent to: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;render(); ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &gt; FAQ Specifying indentation This example shows how to render breadcrumbs with initial indentation. Rendering with 8 spaces indentation: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;setIndent(8) ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &gt; FAQ Customize output This example shows how to customize breadcrumbs output by specifying multiple options. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs() -&gt;setLinkLast(true) // link last page -&gt;setMaxDepth(1) // stop at level 1 -&gt;setSeparator(' ▶' . PHP_EOL); // cool separator with newline ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; ▶ &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; Setting minimum depth required to render breadcrumbs: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;setMinDepth(10) ?&gt; Output: Nothing, because the deepest active page is not at level 10 or deeper. Rendering using a partial view script This example shows how to render customized breadcrumbs using a partial vew script. By calling setPartial() , you can specify a partial view script that will be used when calling render() . When a partial is specified, the renderPartial() method will be called when emitting the breadcrumbs. This method will find the deepest active page and pass an array of pages that leads to the active page to the partial view script. In a layout: echo $this-&gt;navigation()-&gt;breadcrumbs() -&gt;setPartial('my-module/partials/breadcrumbs'); Contents of module/MyModule/view/my-module/partials/breadcrumbs.phtml : &lt;?= implode(', ', array_map(function ($a) { return $a-&gt;getLabel(); }, $this-&gt;pages)); ?&gt; Output: Products, Foo Server, FAQ","title":"Breadcrumbs"},{"location":"helpers/breadcrumbs/#breadcrumbs","text":"Breadcrumbs are used for indicating where in a sitemap a user is currently browsing, and are typically rendered like the following: You are here: Home &gt; Products &gt; FantasticProduct 1.0 The breadcrumbs() helper follows the Breadcrumbs Pattern as original outlined in the Yahoo! Design Pattern Library, and allows simple customization (minimum/maximum depth, indentation, separator, and whether the last element should be linked), or rendering using a partial view script. The Breadcrumbs helper finds the deepest active page in a navigation container, and renders an upwards path to the root. For MVC pages, the \"activeness\" of a page is determined by inspecting the request object, as stated in the section on MVC pages . The helper sets the minDepth property to 1 by default, meaning breadcrumbs will not be rendered if the deepest active page is a root page. If maxDepth is specified, the helper will stop rendering when at the specified depth (e.g. stop at level 2 even if the deepest active page is on level 3). Methods in the breadcrumbs helper: Method signature Description getSeparator() : string Retrieves the separator string to use between breadcrumbs; default is &gt; . setSeparator(string $separator) : self Set the separator string to use between breadcrumbs. getLinkLast() : bool Retrieve the flag indicating whether the last breadcrumb should be rendered as an anchor; defaults to false . setLinkLast(bool $flag) : self Set the flag indicating whether the last breadcrumb should be rendered as an anchor. getPartial() : string\\|array Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's render() method will use the renderPartial() method. The helper expects the partial to be a string or an array with two elements. If the partial is a string , it denotes the name of the partial script to use. If it is an array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found. setPartial(string\\|array $partial) : self Set the partial view script to use when rendering breadcrumbs; see getPartial() for acceptable values. renderStraight() The default render method used when no partial view script is present. renderPartial() Used for rendering using a partial view script.","title":"Breadcrumbs"},{"location":"helpers/breadcrumbs/#basic-usage","text":"This example shows how to render breadcrumbs with default settings. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs(); ?&gt; The call above takes advantage of the magic __toString() method, and is equivalent to: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;render(); ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &gt; FAQ","title":"Basic usage"},{"location":"helpers/breadcrumbs/#specifying-indentation","text":"This example shows how to render breadcrumbs with initial indentation. Rendering with 8 spaces indentation: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;setIndent(8) ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &gt; FAQ","title":"Specifying indentation"},{"location":"helpers/breadcrumbs/#customize-output","text":"This example shows how to customize breadcrumbs output by specifying multiple options. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs() -&gt;setLinkLast(true) // link last page -&gt;setMaxDepth(1) // stop at level 1 -&gt;setSeparator(' ▶' . PHP_EOL); // cool separator with newline ?&gt; Output: &lt;a href=\"/products\"&gt;Products&lt;/a&gt; ▶ &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; Setting minimum depth required to render breadcrumbs: &lt;?= $this-&gt;navigation()-&gt;breadcrumbs()-&gt;setMinDepth(10) ?&gt; Output: Nothing, because the deepest active page is not at level 10 or deeper.","title":"Customize output"},{"location":"helpers/breadcrumbs/#rendering-using-a-partial-view-script","text":"This example shows how to render customized breadcrumbs using a partial vew script. By calling setPartial() , you can specify a partial view script that will be used when calling render() . When a partial is specified, the renderPartial() method will be called when emitting the breadcrumbs. This method will find the deepest active page and pass an array of pages that leads to the active page to the partial view script. In a layout: echo $this-&gt;navigation()-&gt;breadcrumbs() -&gt;setPartial('my-module/partials/breadcrumbs'); Contents of module/MyModule/view/my-module/partials/breadcrumbs.phtml : &lt;?= implode(', ', array_map(function ($a) { return $a-&gt;getLabel(); }, $this-&gt;pages)); ?&gt; Output: Products, Foo Server, FAQ","title":"Rendering using a partial view script"},{"location":"helpers/intro/","text":"View Helpers The navigation helpers are used for rendering navigational elements from Laminas\\Navigation\\Navigation instances. There are 5 built-in helpers: Breadcrumbs , used for rendering the path to the currently active page. Links , used for rendering navigational head links (e.g. &lt;link rel=\"next\" href=\"...\" /&gt; ). Menu , used for rendering menus. Sitemap , used for rendering sitemaps conforming to the Sitemaps XML format . Navigation , used for proxying calls to other navigational helpers. All built-in helpers extend Laminas\\View\\Helper\\Navigation\\AbstractHelper , which adds integration with laminas-acl and laminas-i18n . The abstract class implements the interface Laminas\\View\\Helper\\Navigation\\HelperInterface , which defines the following methods: Method signature Description getContainer() : null\\|AbstractContainer Retrieve the current navigation container, if any. hasContainer() : bool Is any navigation container currently registered? setContainer(AbstractContainer $container) : self Set a navigation container. getTranslator() : null\\|Laminas\\I18n\\Translator\\TranslatorInterface Retrieve the current translator instance, if any. setTranslator(Laminas\\I18n\\Translator\\TranslatorInterface) : self Set a translator instance to use with labels. hasTranslator() : bool Is a translator instance present? isTranslatorEnabled() : bool Should translation occur? To be true , both the flag enabling translation must be set, and a translator instance present. setTranslatorEnabled(bool $flag) : self Set the flag indicating whether or not translation should occur. getAcl() : null\\|Laminas\\Permissions\\Acl\\AclInterface Retrieve the current ACL instance, if any. setAcl(Laminas\\Permissions\\Acl\\AclInterface $acl) : self Set an ACL instance. hasAcl() : bool Whether or not an ACL instance is present. getRole() : null\\|string\\|\\Laminas\\Permissions\\Acl\\Role\\RoleInterface Retrieve the current ACL role instance, if any. setRole(string\\|Laminas\\Permissions\\Acl\\Role\\RoleInterface $acl) : self Set an ACL role instance. hasRole() : bool Whether or not an ACL role instance is present. getUseAcl() : bool Whether or not to use ACLs; both the flag must be enabled and an ACL instance present. setUseAcl(bool $flag) : self Set the flag indicating whether or not to use ACLs. __toString() Cast the helper to a string value; relies on render() . render() Render the helper to a string. In addition to the method stubs from the interface, the abstract class also implements the following methods: Method signature Description getIndent() : string Retrieve the indentation string to use; default is 4 spaces. setIndent(string\\|int $indent) : self Set the indentation to use. In the case of an integer, this indicates the number of spaces. Indentation can be specified for all but the Sitemap helper. getMinDepth() : int Retrieve the minimum depth a page must have to be included in output setMinDepth(null\\|int $depth) : self Set the minimum depth a page must have to be included in output; null means no minimum. getMaxDepth() : int Retrieve the maximum depth a page must have to be included in output setMaxDepth(null\\|int $depth) : self Set the maximum depth a page must have to be included in output; null means no maximum. getRenderInvisible() : bool Retrieve the flag indicating whether or not to render items marked as invisible; defaults to false . setRenderInvisible(bool $flag) : self Set the flag indicating whether or not to render items marked as invisible. __call() : mixed Proxy method calls to the registered container; this allows you to use the helper as if it were a navigation container. See the example below . findActive(/* ... */) : array Find the deepest active page in the container, using the arguments AbstractContainer $container, int $minDepth = null, int $maxDepth = -1) . If depths are not given, the method will use the values retrieved from getMinDepth() and getMaxDepth() . The deepest active page must be between $minDepth and $maxDepth inclusively. Returns an array containing the found page instance (key page ) and the depth (key depth ) at which the page was found. htmlify(AbstractPage $page) : string Renders an HTML a element based on the give page. accept(AbstractPage $page, bool $recursive = true) : bool Determine if a page should be accepted when iterating containers. This method checks for page visibility and verifies that the helper's role is allowed access to the page's resource and privilege. static setDefaultAcl(Laminas\\Permissions\\Acl\\AclInterface $acl) : void Set a default ACL instance to use with all navigation helpers. static setDefaultRole(Laminas\\Permissions\\Acl\\Role\\RoleInterface $acl) : void Set a default ACL role instance to use with all navigation helpers. If a container is not explicitly set, the helper will create an empty Laminas\\Navigation\\Navigation container when calling $helper-&gt;getContainer() . Proxying calls to the navigation container Navigation view helpers use the magic method __call() to proxy method calls to the navigation container that is registered in the view helper. $this-&gt;navigation()-&gt;addPage([ 'type' =&gt; 'uri', 'label' =&gt; 'New page', ]); The call above will add a page to the container in the Navigation helper. Translation of labels and titles The navigation helpers support translation of page labels and titles. You can set a translator of type Laminas\\I18n\\Translator\\TranslatorInterface in the helper using $helper-&gt;setTranslator($translator) . If you want to disable translation, use $helper-&gt;setTranslatorEnabled(false) . The proxy helper will inject its own translator to the helper it proxies to if the proxied helper doesn't already have a translator. Sitemaps do not use translation There is no translation in the sitemap helper, since there are no page labels or titles involved in an XML sitemap. Integration with ACL All navigational view helpers support ACLs. An object implementing Laminas\\Permissions\\Acl\\AclInterface can be assigned to a helper instance with $helper-&gt;setAcl($acl) , and role with $helper-&gt;setRole('member') or $helper-&gt;setRole(new Laminas\\Permissions\\Acl\\Role\\GenericRole('member')) . If an ACL is used in the helper, the role in the helper must be allowed by the ACL to access a page's resource and/or have the page's privilege for the page to be included when rendering. If a page is not accepted by ACL, any descendant page will also be excluded from rendering. The proxy helper will inject its own ACL and role to the helper it proxies to if the proxied helper doesn't already have any. The examples below all show how ACL affects rendering. Navigation setup used in examples This example shows the setup of a navigation container for a fictional software company. Notes on the setup: The domain for the site is www.example.com . Interesting page properties are marked with a comment. Unless otherwise is stated in other examples, the user is requesting the URL http://www.example.com/products/server/faq/ , which translates to the page labeled FAQ under \"Foo Server\". The assumed ACL and router setup is shown below the container setup. use Laminas\\Navigation\\Navigation; /* * Navigation container * Each element in the array will be passed to * Laminas\\Navigation\\Page\\AbstractPage::factory() when constructing * the navigation container below. */ $pages = [ [ 'label' =&gt; 'Home', 'title' =&gt; 'Go Home', 'module' =&gt; 'default', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'order' =&gt; -100, // make sure home is the first page ], [ 'label' =&gt; 'Special offer this week only!', 'module' =&gt; 'store', 'controller' =&gt; 'offer', 'action' =&gt; 'amazing', 'visible' =&gt; false, // not visible ], [ 'label' =&gt; 'Products', 'module' =&gt; 'products', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Foo Server', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'FAQ', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'faq', 'rel' =&gt; [ 'canonical' =&gt; 'http://www.example.com/?page=faq', 'alternate' =&gt; [ 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'faq', 'params' =&gt; ['format' =&gt; 'xml'], ], ], ], [ 'label' =&gt; 'Editions', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'editions', ], [ 'label' =&gt; 'System Requirements', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'requirements', ], ], ], [ 'label' =&gt; 'Foo Studio', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Customer Stories', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'customers', ], [ 'label' =&gt; 'Support', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'support', ], ], ], ], ], [ 'label' =&gt; 'Company', 'title' =&gt; 'About us', 'module' =&gt; 'company', 'controller' =&gt; 'about', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Investor Relations', 'module' =&gt; 'company', 'controller' =&gt; 'about', 'action' =&gt; 'investors', ], [ 'label' =&gt; 'News', 'class' =&gt; 'rss', // class 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Press Releases', 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'press', ], [ 'label' =&gt; 'Archive', 'route' =&gt; 'archive', // route 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'archive', ], ], ], ], ], [ 'label' =&gt; 'Community', 'module' =&gt; 'community', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'My Account', 'module' =&gt; 'community', 'controller' =&gt; 'account', 'action' =&gt; 'index', 'resource' =&gt; 'mvc:community.account', // resource ], [ 'label' =&gt; 'Forums', 'uri' =&gt; 'http://forums.example.com/', 'class' =&gt; 'external', // class, ], ], ], [ 'label' =&gt; 'Administration', 'module' =&gt; 'admin', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'resource' =&gt; 'mvc:admin', // resource 'pages' =&gt; [ [ 'label' =&gt; 'Write new article', 'module' =&gt; 'admin', 'controller' =&gt; 'post', 'action' =&gt; 'write', ], ], ], ]; // Create container from array $container = new Navigation($pages); // Store the container in the proxy helper: $view-&gt;plugin('navigation')-&gt;setContainer($container); // ...or simply: $view-&gt;navigation($container); In addition to the container above, the following router setup is added to the configuration file of the module, e.g. module/MyModule/config/module.config.php return [ /* ... */ 'router' [ 'routes' =&gt; [ 'archive' =&gt; [ 'type' =&gt; 'Segment', 'options' =&gt; [ 'route' =&gt; '/archive/:year', 'defaults' =&gt; [ 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'archive', 'year' =&gt; (int) date('Y') - 1, ], 'constraints' =&gt; [ 'year' =&gt; '\\d+', ], ], ], /* You can have other routes here... */ ], ], /* ... */ ]; The setup of ACL can be done in a module class, e.g. module/MyModule/Module.php : namespace MyModule; use Laminas\\View\\HelperPluginManager; use Laminas\\Permissions\\Acl\\Acl; use Laminas\\Permissions\\Acl\\Role\\GenericRole; use Laminas\\Permissions\\Acl\\Resource\\GenericResource; class Module { /* ... */ public function getViewHelperConfig() { return [ 'factories' =&gt; [ // This will overwrite the native navigation helper 'navigation' =&gt; function(HelperPluginManager $pm) { // Setup ACL: $acl = new Acl(); $acl-&gt;addRole(new GenericRole('member')); $acl-&gt;addRole(new GenericRole('admin')); $acl-&gt;addResource(new GenericResource('mvc:admin')); $acl-&gt;addResource(new GenericResource('mvc:community.account')); $acl-&gt;allow('member', 'mvc:community.account'); $acl-&gt;allow('admin', null); // Get an instance of the proxy helper $navigation = $pm-&gt;get('Laminas\\View\\Helper\\Navigation'); // Store ACL and role in the proxy helper: $navigation-&gt;setAcl($acl); $navigation-&gt;setRole('member'); // Return the new navigation helper instance return $navigation; } ] ]; } /* ... */ }","title":"Introduction"},{"location":"helpers/intro/#view-helpers","text":"The navigation helpers are used for rendering navigational elements from Laminas\\Navigation\\Navigation instances. There are 5 built-in helpers: Breadcrumbs , used for rendering the path to the currently active page. Links , used for rendering navigational head links (e.g. &lt;link rel=\"next\" href=\"...\" /&gt; ). Menu , used for rendering menus. Sitemap , used for rendering sitemaps conforming to the Sitemaps XML format . Navigation , used for proxying calls to other navigational helpers. All built-in helpers extend Laminas\\View\\Helper\\Navigation\\AbstractHelper , which adds integration with laminas-acl and laminas-i18n . The abstract class implements the interface Laminas\\View\\Helper\\Navigation\\HelperInterface , which defines the following methods: Method signature Description getContainer() : null\\|AbstractContainer Retrieve the current navigation container, if any. hasContainer() : bool Is any navigation container currently registered? setContainer(AbstractContainer $container) : self Set a navigation container. getTranslator() : null\\|Laminas\\I18n\\Translator\\TranslatorInterface Retrieve the current translator instance, if any. setTranslator(Laminas\\I18n\\Translator\\TranslatorInterface) : self Set a translator instance to use with labels. hasTranslator() : bool Is a translator instance present? isTranslatorEnabled() : bool Should translation occur? To be true , both the flag enabling translation must be set, and a translator instance present. setTranslatorEnabled(bool $flag) : self Set the flag indicating whether or not translation should occur. getAcl() : null\\|Laminas\\Permissions\\Acl\\AclInterface Retrieve the current ACL instance, if any. setAcl(Laminas\\Permissions\\Acl\\AclInterface $acl) : self Set an ACL instance. hasAcl() : bool Whether or not an ACL instance is present. getRole() : null\\|string\\|\\Laminas\\Permissions\\Acl\\Role\\RoleInterface Retrieve the current ACL role instance, if any. setRole(string\\|Laminas\\Permissions\\Acl\\Role\\RoleInterface $acl) : self Set an ACL role instance. hasRole() : bool Whether or not an ACL role instance is present. getUseAcl() : bool Whether or not to use ACLs; both the flag must be enabled and an ACL instance present. setUseAcl(bool $flag) : self Set the flag indicating whether or not to use ACLs. __toString() Cast the helper to a string value; relies on render() . render() Render the helper to a string. In addition to the method stubs from the interface, the abstract class also implements the following methods: Method signature Description getIndent() : string Retrieve the indentation string to use; default is 4 spaces. setIndent(string\\|int $indent) : self Set the indentation to use. In the case of an integer, this indicates the number of spaces. Indentation can be specified for all but the Sitemap helper. getMinDepth() : int Retrieve the minimum depth a page must have to be included in output setMinDepth(null\\|int $depth) : self Set the minimum depth a page must have to be included in output; null means no minimum. getMaxDepth() : int Retrieve the maximum depth a page must have to be included in output setMaxDepth(null\\|int $depth) : self Set the maximum depth a page must have to be included in output; null means no maximum. getRenderInvisible() : bool Retrieve the flag indicating whether or not to render items marked as invisible; defaults to false . setRenderInvisible(bool $flag) : self Set the flag indicating whether or not to render items marked as invisible. __call() : mixed Proxy method calls to the registered container; this allows you to use the helper as if it were a navigation container. See the example below . findActive(/* ... */) : array Find the deepest active page in the container, using the arguments AbstractContainer $container, int $minDepth = null, int $maxDepth = -1) . If depths are not given, the method will use the values retrieved from getMinDepth() and getMaxDepth() . The deepest active page must be between $minDepth and $maxDepth inclusively. Returns an array containing the found page instance (key page ) and the depth (key depth ) at which the page was found. htmlify(AbstractPage $page) : string Renders an HTML a element based on the give page. accept(AbstractPage $page, bool $recursive = true) : bool Determine if a page should be accepted when iterating containers. This method checks for page visibility and verifies that the helper's role is allowed access to the page's resource and privilege. static setDefaultAcl(Laminas\\Permissions\\Acl\\AclInterface $acl) : void Set a default ACL instance to use with all navigation helpers. static setDefaultRole(Laminas\\Permissions\\Acl\\Role\\RoleInterface $acl) : void Set a default ACL role instance to use with all navigation helpers. If a container is not explicitly set, the helper will create an empty Laminas\\Navigation\\Navigation container when calling $helper-&gt;getContainer() .","title":"View Helpers"},{"location":"helpers/intro/#proxying-calls-to-the-navigation-container","text":"Navigation view helpers use the magic method __call() to proxy method calls to the navigation container that is registered in the view helper. $this-&gt;navigation()-&gt;addPage([ 'type' =&gt; 'uri', 'label' =&gt; 'New page', ]); The call above will add a page to the container in the Navigation helper.","title":"Proxying calls to the navigation container"},{"location":"helpers/intro/#translation-of-labels-and-titles","text":"The navigation helpers support translation of page labels and titles. You can set a translator of type Laminas\\I18n\\Translator\\TranslatorInterface in the helper using $helper-&gt;setTranslator($translator) . If you want to disable translation, use $helper-&gt;setTranslatorEnabled(false) . The proxy helper will inject its own translator to the helper it proxies to if the proxied helper doesn't already have a translator.","title":"Translation of labels and titles"},{"location":"helpers/intro/#integration-with-acl","text":"All navigational view helpers support ACLs. An object implementing Laminas\\Permissions\\Acl\\AclInterface can be assigned to a helper instance with $helper-&gt;setAcl($acl) , and role with $helper-&gt;setRole('member') or $helper-&gt;setRole(new Laminas\\Permissions\\Acl\\Role\\GenericRole('member')) . If an ACL is used in the helper, the role in the helper must be allowed by the ACL to access a page's resource and/or have the page's privilege for the page to be included when rendering. If a page is not accepted by ACL, any descendant page will also be excluded from rendering. The proxy helper will inject its own ACL and role to the helper it proxies to if the proxied helper doesn't already have any. The examples below all show how ACL affects rendering.","title":"Integration with ACL"},{"location":"helpers/intro/#navigation-setup-used-in-examples","text":"This example shows the setup of a navigation container for a fictional software company. Notes on the setup: The domain for the site is www.example.com . Interesting page properties are marked with a comment. Unless otherwise is stated in other examples, the user is requesting the URL http://www.example.com/products/server/faq/ , which translates to the page labeled FAQ under \"Foo Server\". The assumed ACL and router setup is shown below the container setup. use Laminas\\Navigation\\Navigation; /* * Navigation container * Each element in the array will be passed to * Laminas\\Navigation\\Page\\AbstractPage::factory() when constructing * the navigation container below. */ $pages = [ [ 'label' =&gt; 'Home', 'title' =&gt; 'Go Home', 'module' =&gt; 'default', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'order' =&gt; -100, // make sure home is the first page ], [ 'label' =&gt; 'Special offer this week only!', 'module' =&gt; 'store', 'controller' =&gt; 'offer', 'action' =&gt; 'amazing', 'visible' =&gt; false, // not visible ], [ 'label' =&gt; 'Products', 'module' =&gt; 'products', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Foo Server', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'FAQ', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'faq', 'rel' =&gt; [ 'canonical' =&gt; 'http://www.example.com/?page=faq', 'alternate' =&gt; [ 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'faq', 'params' =&gt; ['format' =&gt; 'xml'], ], ], ], [ 'label' =&gt; 'Editions', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'editions', ], [ 'label' =&gt; 'System Requirements', 'module' =&gt; 'products', 'controller' =&gt; 'server', 'action' =&gt; 'requirements', ], ], ], [ 'label' =&gt; 'Foo Studio', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Customer Stories', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'customers', ], [ 'label' =&gt; 'Support', 'module' =&gt; 'products', 'controller' =&gt; 'studio', 'action' =&gt; 'support', ], ], ], ], ], [ 'label' =&gt; 'Company', 'title' =&gt; 'About us', 'module' =&gt; 'company', 'controller' =&gt; 'about', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Investor Relations', 'module' =&gt; 'company', 'controller' =&gt; 'about', 'action' =&gt; 'investors', ], [ 'label' =&gt; 'News', 'class' =&gt; 'rss', // class 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'Press Releases', 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'press', ], [ 'label' =&gt; 'Archive', 'route' =&gt; 'archive', // route 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'archive', ], ], ], ], ], [ 'label' =&gt; 'Community', 'module' =&gt; 'community', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'pages' =&gt; [ [ 'label' =&gt; 'My Account', 'module' =&gt; 'community', 'controller' =&gt; 'account', 'action' =&gt; 'index', 'resource' =&gt; 'mvc:community.account', // resource ], [ 'label' =&gt; 'Forums', 'uri' =&gt; 'http://forums.example.com/', 'class' =&gt; 'external', // class, ], ], ], [ 'label' =&gt; 'Administration', 'module' =&gt; 'admin', 'controller' =&gt; 'index', 'action' =&gt; 'index', 'resource' =&gt; 'mvc:admin', // resource 'pages' =&gt; [ [ 'label' =&gt; 'Write new article', 'module' =&gt; 'admin', 'controller' =&gt; 'post', 'action' =&gt; 'write', ], ], ], ]; // Create container from array $container = new Navigation($pages); // Store the container in the proxy helper: $view-&gt;plugin('navigation')-&gt;setContainer($container); // ...or simply: $view-&gt;navigation($container); In addition to the container above, the following router setup is added to the configuration file of the module, e.g. module/MyModule/config/module.config.php return [ /* ... */ 'router' [ 'routes' =&gt; [ 'archive' =&gt; [ 'type' =&gt; 'Segment', 'options' =&gt; [ 'route' =&gt; '/archive/:year', 'defaults' =&gt; [ 'module' =&gt; 'company', 'controller' =&gt; 'news', 'action' =&gt; 'archive', 'year' =&gt; (int) date('Y') - 1, ], 'constraints' =&gt; [ 'year' =&gt; '\\d+', ], ], ], /* You can have other routes here... */ ], ], /* ... */ ]; The setup of ACL can be done in a module class, e.g. module/MyModule/Module.php : namespace MyModule; use Laminas\\View\\HelperPluginManager; use Laminas\\Permissions\\Acl\\Acl; use Laminas\\Permissions\\Acl\\Role\\GenericRole; use Laminas\\Permissions\\Acl\\Resource\\GenericResource; class Module { /* ... */ public function getViewHelperConfig() { return [ 'factories' =&gt; [ // This will overwrite the native navigation helper 'navigation' =&gt; function(HelperPluginManager $pm) { // Setup ACL: $acl = new Acl(); $acl-&gt;addRole(new GenericRole('member')); $acl-&gt;addRole(new GenericRole('admin')); $acl-&gt;addResource(new GenericResource('mvc:admin')); $acl-&gt;addResource(new GenericResource('mvc:community.account')); $acl-&gt;allow('member', 'mvc:community.account'); $acl-&gt;allow('admin', null); // Get an instance of the proxy helper $navigation = $pm-&gt;get('Laminas\\View\\Helper\\Navigation'); // Store ACL and role in the proxy helper: $navigation-&gt;setAcl($acl); $navigation-&gt;setRole('member'); // Return the new navigation helper instance return $navigation; } ] ]; } /* ... */ }","title":"Navigation setup used in examples"},{"location":"helpers/links/","text":"Links The links() helper is used for rendering HTML LINK elements. Links are used for describing document relationships of the currently active page. Read more about links and link types at: Document relationships: the LINK element (HTML4 W3C Rec.) Link types (HTML4 W3C Rec.) There are two types of relations; forward and reverse, indicated by the kewyords rel and rev . Most methods in the helper will take a $rel param, which must be either rel or rev . Most methods also take a $type param, which is used for specifying the link type (e.g. alternate , start , next , prev , chapter , etc). Managing Relationships within the Helper Relationships can be added to page objects manually, or found by traversing the container registered in the helper. The method findRelation($page, $rel, $type) will first try to find the given $rel of $type from the $page by calling $page&gt;findRel($type) or $page&gt;findRel($type) . If the $page has a relation that can be converted to a page instance, that relation will be used. If the $page instance doesn't have the specified $type , the helper will look for a method in the helper named search$rel$type (e.g. searchRelNext() or searchRevAlternate() ). If such a method exists, it will be used for determining the $page 's relation by traversing the container. Not all relations can be determined by traversing the container. These are the relations that will be found by searching: searchRelStart() , forward start relation: the first page in the container. searchRelNext() , forward next relation; finds the next page in the container, i.e. the page after the active page. searchRelPrev() , forward prev relation; finds the previous page, i.e. the page before the active page. searchRelChapter() , forward chapter relations; finds all pages on level 0 except the start relation or the active page if it's on level 0. searchRelSection() , forward section relations; finds all child pages of the active page if the active page is on level 0 (a chapter ). searchRelSubsection() , forward subsection relations; finds all child pages of the active page if the active pages is on level 1 (a section ). searchRevSection() , reverse section relation; finds the parent of the active page if the active page is on level 1 (a section ). searchRevSubsection() , reverse subsection relation; finds the parent of the active page if the active page is on level 2 (a subsection ). Allowed relation types When looking for relations in the page instance ( $page-&gt;getRel($type) or $page-&gt;getRev($type) ), the helper accepts the values of type string , array , Traversable , or Laminas\\Navigation\\Page\\AbstractPage : AbstractPage instances are used directly. If a string is found, it will be converted to a Laminas\\Navigation\\Page\\Uri . If an array or Traversable is found, it will be converted to one or several page instances. If the first key is numeric, it will be considered to contain several pages, and each element will be passed to the page factory . If the first key is not numeric, the value will be passed to the page factory directly, and a single page will be returned. The helper also supports magic methods for finding relations. E.g. to find forward alternate relations, call $helper-&gt;findRelAlternate($page) , and to find reverse section relations, call $helper-&gt;findRevSection($page) . Those calls correspond to $helper-&gt;findRelation($page, 'rel', 'alternate') and $helper-&gt;findRelation($page, 'rev', 'section') , respectively. To customize which relations should be rendered, the helper uses a render flag. The render flag is an integer value, and will be used in a bitwise and ( &amp; ) operation against the helper's render constants to determine if the relation that belongs to the render constant should be rendered. See the example below for more information. The Links helper defines the following constants: Laminas\\View\\Helper\\Navigation\\Links::RENDER_ALTERNATE Laminas\\View\\Helper\\Navigation\\Links::RENDER_STYLESHEET Laminas\\View\\Helper\\Navigation\\Links::RENDER_START Laminas\\View\\Helper\\Navigation\\Links::RENDER_NEXT Laminas\\View\\Helper\\Navigation\\Links::RENDER_PREV Laminas\\View\\Helper\\Navigation\\Links::RENDER_CONTENTS Laminas\\View\\Helper\\Navigation\\Links::RENDER_INDEX Laminas\\View\\Helper\\Navigation\\Links::RENDER_GLOSSARY Laminas\\View\\Helper\\Navigation\\Links::RENDER_COPYRIGHT Laminas\\View\\Helper\\Navigation\\Links::RENDER_CHAPTER Laminas\\View\\Helper\\Navigation\\Links::RENDER_SECTION Laminas\\View\\Helper\\Navigation\\Links::RENDER_SUBSECTION Laminas\\View\\Helper\\Navigation\\Links::RENDER_APPENDIX Laminas\\View\\Helper\\Navigation\\Links::RENDER_HELP Laminas\\View\\Helper\\Navigation\\Links::RENDER_BOOKMARK Laminas\\View\\Helper\\Navigation\\Links::RENDER_CUSTOM Laminas\\View\\Helper\\Navigation\\Links::RENDER_ALL The constants from RENDER_ALTERNATE to RENDER_BOOKMARK denote standard HTML link types. RENDER_CUSTOM denotes non-standard relations specified in pages. RENDER_ALL denotes standard and non-standard relations. Methods in the links helper: Method signature Description getRenderFlag() : int Retrieves the render flag; default is RENDER_ALL . setRenderFlag(int $flag) : self Set the render flag; see examples below. findAllRelations(AbstractPage $page, int $flag = null) : array Finds all relations of all types for a given page. findRelation(AbstractPage $page, string $rel, string $type) : AbstractPage\\|array\\|null Finds all relations of a given type from a given page. searchRel*(AbstractPage $page) : AbstractPage\\|null Traverses a container to find forward relations to the Start page, the Next page, the Prev ious page, Chapter s, Section s, and Subsection s. searchRev*(AbstractPage $page) : AbstractPage\\|null Traverses a container to find reverse relations to Section s or Subsection s. renderLink(AbstractPage $page, string $attrib, string $relation) : string Renders a single link element. Basic usage Specify relations in pages This example shows how to specify relations in pages. use Laminas\\Config\\Config; use Laminas\\Navigation\\Navigation; use Laminas\\Navigation\\Page\\AbstractPage; $container = new Navigation([ [ 'label' =&gt; 'Relations using strings', 'rel' =&gt; [ 'alternate' =&gt; 'http://www.example.org/', ], 'rev' =&gt; [ 'alternate' =&gt; 'http://www.example.net/', ], ], [ 'label' =&gt; 'Relations using arrays', 'rel' =&gt; [ 'alternate' =&gt; [ 'label' =&gt; 'Example.org', 'uri' =&gt; 'http://www.example.org/', ], ], ], [ 'label' =&gt; 'Relations using configs', 'rel' =&gt; [ 'alternate' =&gt; new Config([ 'label' =&gt; 'Example.org', 'uri' =&gt; 'http://www.example.org/', ]), ], ], [ 'label' =&gt; 'Relations using pages instance', 'rel' =&gt; [ 'alternate' =&gt; AbstractPage::factory([ 'label' =&gt; 'Example.org', 'uri' =&gt; 'http://www.example.org/', ]), ], ], ]); Default rendering of links This example shows how to render a menu from a container registered in the view helper. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;links() ?&gt; Output: &lt;link rel=\"alternate\" href=\"/products/server/faq/format/xml\"&gt; &lt;link rel=\"start\" href=\"/\" title=\"Home\"&gt; &lt;link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\"&gt; &lt;link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\"&gt; &lt;link rel=\"chapter\" href=\"/products\" title=\"Products\"&gt; &lt;link rel=\"chapter\" href=\"/company/about\" title=\"Company\"&gt; &lt;link rel=\"chapter\" href=\"/community\" title=\"Community\"&gt; &lt;link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\"&gt; &lt;link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\"&gt; Specify which relations to render This example shows how to specify which relations to find and render. Render only start, next, and prev: use Laminas\\View\\Helper\\Navigation\\Links; $links = $this-&gt;navigation()-&gt;links(); $links-&gt;setRenderFlag(Links::RENDER_START | Links::RENDER_NEXT | Links::RENDER_PREV); echo $links; Output: &lt;link rel=\"start\" href=\"/\" title=\"Home\"&gt; &lt;link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\"&gt; &lt;link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\"&gt; Render only native link types: $links-&gt;setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CUSTOM); echo $links; Output: &lt;link rel=\"alternate\" href=\"/products/server/faq/format/xml\"&gt; &lt;link rel=\"start\" href=\"/\" title=\"Home\"&gt; &lt;link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\"&gt; &lt;link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\"&gt; &lt;link rel=\"chapter\" href=\"/products\" title=\"Products\"&gt; &lt;link rel=\"chapter\" href=\"/company/about\" title=\"Company\"&gt; &lt;link rel=\"chapter\" href=\"/community\" title=\"Community\"&gt; &lt;link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\"&gt; Render all but chapters: $links-&gt;setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CHAPTER); echo $links; Output: &lt;link rel=\"alternate\" href=\"/products/server/faq/format/xml\"&gt; &lt;link rel=\"start\" href=\"/\" title=\"Home\"&gt; &lt;link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\"&gt; &lt;link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\"&gt; &lt;link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\"&gt; &lt;link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\"&gt;","title":"Links"},{"location":"helpers/links/#links","text":"The links() helper is used for rendering HTML LINK elements. Links are used for describing document relationships of the currently active page. Read more about links and link types at: Document relationships: the LINK element (HTML4 W3C Rec.) Link types (HTML4 W3C Rec.) There are two types of relations; forward and reverse, indicated by the kewyords rel and rev . Most methods in the helper will take a $rel param, which must be either rel or rev . Most methods also take a $type param, which is used for specifying the link type (e.g. alternate , start , next , prev , chapter , etc).","title":"Links"},{"location":"helpers/links/#managing-relationships-within-the-helper","text":"Relationships can be added to page objects manually, or found by traversing the container registered in the helper. The method findRelation($page, $rel, $type) will first try to find the given $rel of $type from the $page by calling $page&gt;findRel($type) or $page&gt;findRel($type) . If the $page has a relation that can be converted to a page instance, that relation will be used. If the $page instance doesn't have the specified $type , the helper will look for a method in the helper named search$rel$type (e.g. searchRelNext() or searchRevAlternate() ). If such a method exists, it will be used for determining the $page 's relation by traversing the container. Not all relations can be determined by traversing the container. These are the relations that will be found by searching: searchRelStart() , forward start relation: the first page in the container. searchRelNext() , forward next relation; finds the next page in the container, i.e. the page after the active page. searchRelPrev() , forward prev relation; finds the previous page, i.e. the page before the active page. searchRelChapter() , forward chapter relations; finds all pages on level 0 except the start relation or the active page if it's on level 0. searchRelSection() , forward section relations; finds all child pages of the active page if the active page is on level 0 (a chapter ). searchRelSubsection() , forward subsection relations; finds all child pages of the active page if the active pages is on level 1 (a section ). searchRevSection() , reverse section relation; finds the parent of the active page if the active page is on level 1 (a section ). searchRevSubsection() , reverse subsection relation; finds the parent of the active page if the active page is on level 2 (a subsection ).","title":"Managing Relationships within the Helper"},{"location":"helpers/links/#basic-usage","text":"","title":"Basic usage"},{"location":"helpers/menu/","text":"Menu The menu() helper is used for rendering menus from navigation containers. By default, the menu will be rendered using HTML UL and LI tags, but the helper also allows using a partial view script. Methods in the Menu helper: Method signature Description getUlClass() : string Retrieve the CSS class used when rendering ul elements in renderMenu() . setUlClass(string $class) : self Set the CSS class to use when rendering ul elements in renderMenu() . getOnlyActiveBranch() : bool Retrieve the flag specifying whether or not to render only the active branch of a container. setOnlyActiveBranch(bool $flag) : self Set the flag specifying whether or not to render only the active branch of a container. getRenderParents() : bool Retrieve the flag specifying whether or not to render parent pages when rendering the active branch of a container. setRenderParents(bool $flag) : self Set the flag specifying whether or not to render parent pages when rendering the active branch of a container. When set to false , only the deepest active menu will be rendered. getPartial() : string\\|array Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's render() method will use the renderPartial() method. The helper expects the partial to be a string or an array with two elements. If the partial is a string , it denotes the name of the partial script to use. If it is an array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found. setPartial(string\\|array $partial) : self Set the partial view script to use when rendering breadcrumbs; see getPartial() for acceptable values. htmlify(/* ... */) : string Overrides the method from the abstract class, with the argument list AbstractPage $page, bool $escapeLabel = true, bool $addClassToListItem = false . Returns span elements if the page has no href . renderMenu(AbstractContainer $container = null, $options = []) : string Default rendering method; renders a container as an HTML UL list. If $container is not given, the container registered in the helper will be rendered. $options is used for overriding options specified temporarily without resetting the values in the helper instance; if none are set, those already provided to the helper will be used. Options are an associative array where each key corresponds to an option in the helper. See the table below for recognized options. renderPartial(AbstractContainer $container = null, string\\|array $partial = null) : string Used for rendering the menu using a partial view script. renderSubMenu(/* ... */) : string Renders the deepest menu level of a container's active branch. Accepts the arguments AbstractContainer $container , string $ulClass = null , string\\|int $indent = null (an integer value indicates number of spaces to use), string $liActiveClass = null . The following are options recognized by the renderMenu() method: Option name Description indent Indentation. Expects a string or an int value. minDepth Minimum depth. Expects an int or null (no minimum depth). maxDepth Maximum depth. Expects an int or null (no maximum depth). ulClass CSS class for ul element. Expects a string . onlyActiveBranch Whether only active branch should be rendered. Expects a boolean value. renderParents Whether parents should be rendered if only rendering active branch. Expects a boolean value. Basic usage This example shows how to render a menu from a container registered/found in the view helper. Notice how pages are filtered out based on visibility and ACL. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;menu()-&gt;render() ?&gt; Or: &lt;?= $this-&gt;navigation()-&gt;menu() ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/products/studio/customers\"&gt;Customer Stories&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio/support\"&gt;Support&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/news/press\"&gt;Press Releases&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/archive\"&gt;Archive&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Calling renderMenu() directly This example shows how to render a menu that is not registered in the view helper by calling renderMenu() directly and specifying options. &lt;?php // render only the 'Community' menu $community = $this-&gt;navigation()-&gt;findOneByLabel('Community'); $options = [ 'indent' =&gt; 16, 'ulClass' =&gt; 'community' ]; echo $this-&gt;navigation() -&gt;menu() -&gt;renderMenu($community, $options); ?&gt; Output: &lt;ul class=\"community\"&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; Rendering the deepest active menu This example shows how renderSubMenu() will render the deepest sub menu of the active branch. Calling renderSubMenu($container, $ulClass, $indent) is equivalent to calling renderMenu($container, $options) with the following options: [ 'ulClass' =&gt; $ulClass, 'indent' =&gt; $indent, 'minDepth' =&gt; null, 'maxDepth' =&gt; null, 'onlyActiveBranch' =&gt; true, 'renderParents' =&gt; false, ] Usage of renderSubMenu method: &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;renderSubMenu(null, 'sidebar', 4) ?&gt; The output will be the same if 'FAQ' or 'Foo Server' is active: &lt;ul class=\"sidebar\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; Rendering with maximum depth &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Rendering with minimum depth &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setMinDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/products/studio/customers\"&gt;Customer Stories&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio/support\"&gt;Support&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/news/press\"&gt;Press Releases&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/archive\"&gt;Archive&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; Rendering only the active branch &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Rendering only the active branch with minimum depth &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setMinDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Rendering only the active branch with maximum depth &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Rendering only the active branch with maximum depth and no parents &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setRenderParents(false) -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; Rendering a custom menu using a partial view script This example shows how to render a custom menu using a partial view script. By calling setPartial() , you can specify a partial view script that will be used when calling render() ; when a partial is specified, that method will proxy to the renderPartial() method. The renderPartial() method will assign the container to the view with the key container . In a layout: $this-&gt;navigation()-&gt;menu()-&gt;setPartial('my-module/partials/menu'); echo $this-&gt;navigation()-&gt;menu()-&gt;render(); In module/MyModule/view/my-module/partials/menu.phtml : foreach ($this-&gt;container as $page) { echo $this-&gt;navigation()-&gt;menu()-&gt;htmlify($page) . PHP_EOL; } Output: &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; Using additional parameters in partial view scripts Starting with version 2.6.0, you can assign custom variables to a partial script. In a layout: // Set partial $this-&gt;navigation()-&gt;menu()-&gt;setPartial('my-module/partials/menu'); // Output menu echo $this-&gt;navigation()-&gt;menu()-&gt;renderPartialWithParams( [ 'headline' =&gt; 'Links', ] ); In module/MyModule/view/my-module/partials/menu.phtml : &lt;h1&gt;&lt;?= $headline ?&gt;&lt;/h1&gt; &lt;?php foreach ($this-&gt;container as $page) { echo $this-&gt;navigation()-&gt;menu()-&gt;htmlify($page) . PHP_EOL; } ?&gt; Output: &lt;h1&gt;Links&lt;/h1&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; Using menu options in partial view scripts In a layout: // Set options $this-&gt;navigation()-&gt;menu() -&gt;setUlClass('my-nav') -&gt;setPartial('my-module/partials/menu'); // Output menu echo $this-&gt;navigation()-&gt;menu()-&gt;render(); In module/MyModule/view/my-module/partials/menu.phtml : &lt;div class\"&lt;?= $this-&gt;navigation()-&gt;menu()-&gt;getUlClass() ?&gt;\"&gt; &lt;?php foreach ($this-&gt;container as $page) { echo $this-&gt;navigation()-&gt;menu()-&gt;htmlify($page) . PHP_EOL; } ?&gt; &lt;/div&gt; Output: &lt;div class=\"my-nav\"&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; &lt;/div&gt; Using ACLs with partial view scripts If you want to use an ACL within your partial view script, then you will have to check the access to a page manually. In module/MyModule/view/my-module/partials/menu.phtml : foreach ($this-&gt;container as $page) { if ($this-&gt;navigation()-&gt;accept($page)) { echo $this-&gt;navigation()-&gt;menu()-&gt;htmlify($page) . PHP_EOL; } }","title":"Menu"},{"location":"helpers/menu/#menu","text":"The menu() helper is used for rendering menus from navigation containers. By default, the menu will be rendered using HTML UL and LI tags, but the helper also allows using a partial view script. Methods in the Menu helper: Method signature Description getUlClass() : string Retrieve the CSS class used when rendering ul elements in renderMenu() . setUlClass(string $class) : self Set the CSS class to use when rendering ul elements in renderMenu() . getOnlyActiveBranch() : bool Retrieve the flag specifying whether or not to render only the active branch of a container. setOnlyActiveBranch(bool $flag) : self Set the flag specifying whether or not to render only the active branch of a container. getRenderParents() : bool Retrieve the flag specifying whether or not to render parent pages when rendering the active branch of a container. setRenderParents(bool $flag) : self Set the flag specifying whether or not to render parent pages when rendering the active branch of a container. When set to false , only the deepest active menu will be rendered. getPartial() : string\\|array Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's render() method will use the renderPartial() method. The helper expects the partial to be a string or an array with two elements. If the partial is a string , it denotes the name of the partial script to use. If it is an array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found. setPartial(string\\|array $partial) : self Set the partial view script to use when rendering breadcrumbs; see getPartial() for acceptable values. htmlify(/* ... */) : string Overrides the method from the abstract class, with the argument list AbstractPage $page, bool $escapeLabel = true, bool $addClassToListItem = false . Returns span elements if the page has no href . renderMenu(AbstractContainer $container = null, $options = []) : string Default rendering method; renders a container as an HTML UL list. If $container is not given, the container registered in the helper will be rendered. $options is used for overriding options specified temporarily without resetting the values in the helper instance; if none are set, those already provided to the helper will be used. Options are an associative array where each key corresponds to an option in the helper. See the table below for recognized options. renderPartial(AbstractContainer $container = null, string\\|array $partial = null) : string Used for rendering the menu using a partial view script. renderSubMenu(/* ... */) : string Renders the deepest menu level of a container's active branch. Accepts the arguments AbstractContainer $container , string $ulClass = null , string\\|int $indent = null (an integer value indicates number of spaces to use), string $liActiveClass = null . The following are options recognized by the renderMenu() method: Option name Description indent Indentation. Expects a string or an int value. minDepth Minimum depth. Expects an int or null (no minimum depth). maxDepth Maximum depth. Expects an int or null (no maximum depth). ulClass CSS class for ul element. Expects a string . onlyActiveBranch Whether only active branch should be rendered. Expects a boolean value. renderParents Whether parents should be rendered if only rendering active branch. Expects a boolean value.","title":"Menu"},{"location":"helpers/menu/#basic-usage","text":"This example shows how to render a menu from a container registered/found in the view helper. Notice how pages are filtered out based on visibility and ACL. In a view script or layout: &lt;?= $this-&gt;navigation()-&gt;menu()-&gt;render() ?&gt; Or: &lt;?= $this-&gt;navigation()-&gt;menu() ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/products/studio/customers\"&gt;Customer Stories&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio/support\"&gt;Support&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/news/press\"&gt;Press Releases&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/archive\"&gt;Archive&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Basic usage"},{"location":"helpers/menu/#calling-rendermenu-directly","text":"This example shows how to render a menu that is not registered in the view helper by calling renderMenu() directly and specifying options. &lt;?php // render only the 'Community' menu $community = $this-&gt;navigation()-&gt;findOneByLabel('Community'); $options = [ 'indent' =&gt; 16, 'ulClass' =&gt; 'community' ]; echo $this-&gt;navigation() -&gt;menu() -&gt;renderMenu($community, $options); ?&gt; Output: &lt;ul class=\"community\"&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Calling renderMenu() directly"},{"location":"helpers/menu/#rendering-the-deepest-active-menu","text":"This example shows how renderSubMenu() will render the deepest sub menu of the active branch. Calling renderSubMenu($container, $ulClass, $indent) is equivalent to calling renderMenu($container, $options) with the following options: [ 'ulClass' =&gt; $ulClass, 'indent' =&gt; $indent, 'minDepth' =&gt; null, 'maxDepth' =&gt; null, 'onlyActiveBranch' =&gt; true, 'renderParents' =&gt; false, ] Usage of renderSubMenu method: &lt;?= $this-&gt;navigation() -&gt;menu() -&gt;renderSubMenu(null, 'sidebar', 4) ?&gt; The output will be the same if 'FAQ' or 'Foo Server' is active: &lt;ul class=\"sidebar\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering the deepest active menu"},{"location":"helpers/menu/#rendering-with-maximum-depth","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li&gt; &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering with maximum depth"},{"location":"helpers/menu/#rendering-with-minimum-depth","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setMinDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/products/studio/customers\"&gt;Customer Stories&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio/support\"&gt;Support&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/company/about/investors\"&gt;Investor Relations&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"rss\" href=\"/company/news\"&gt;News&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"/company/news/press\"&gt;Press Releases&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/archive\"&gt;Archive&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/community/account\"&gt;My Account&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=\"external\" href=\"http://forums.example.com/\"&gt;Forums&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering with minimum depth"},{"location":"helpers/menu/#rendering-only-the-active-branch","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering only the active branch"},{"location":"helpers/menu/#rendering-only-the-active-branch-with-minimum-depth","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setMinDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server/faq\"&gt;FAQ&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/editions\"&gt;Editions&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/server/requirements\"&gt;System Requirements&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering only the active branch with minimum depth"},{"location":"helpers/menu/#rendering-only-the-active-branch-with-maximum-depth","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;ul&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering only the active branch with maximum depth"},{"location":"helpers/menu/#rendering-only-the-active-branch-with-maximum-depth-and-no-parents","text":"&lt;?= $this-&gt;navigation() -&gt;menu() -&gt;setOnlyActiveBranch(true) -&gt;setRenderParents(false) -&gt;setMaxDepth(1) ?&gt; Output: &lt;ul class=\"navigation\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"/products/server\"&gt;Foo Server&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/products/studio\"&gt;Foo Studio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;","title":"Rendering only the active branch with maximum depth and no parents"},{"location":"helpers/menu/#rendering-a-custom-menu-using-a-partial-view-script","text":"This example shows how to render a custom menu using a partial view script. By calling setPartial() , you can specify a partial view script that will be used when calling render() ; when a partial is specified, that method will proxy to the renderPartial() method. The renderPartial() method will assign the container to the view with the key container . In a layout: $this-&gt;navigation()-&gt;menu()-&gt;setPartial('my-module/partials/menu'); echo $this-&gt;navigation()-&gt;menu()-&gt;render(); In module/MyModule/view/my-module/partials/menu.phtml : foreach ($this-&gt;container as $page) { echo $this-&gt;navigation()-&gt;menu()-&gt;htmlify($page) . PHP_EOL; } Output: &lt;a title=\"Go Home\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/products\"&gt;Products&lt;/a&gt; &lt;a title=\"About us\" href=\"/company/about\"&gt;Company&lt;/a&gt; &lt;a href=\"/community\"&gt;Community&lt;/a&gt;","title":"Rendering a custom menu using a partial view script"},{"location":"helpers/navigation/","text":"Navigation Proxy The navigation() helper is a proxy helper that relays calls to other navigational helpers. It can be considered an entry point to all navigation-related view tasks. The Navigation helper finds other helpers that implement Laminas\\View\\Helper\\Navigation\\HelperInterface , which means custom view helpers can also be proxied. This would, however, require that the custom helper path is added to the view. When proxying to other helpers, the Navigation helper can inject its container, ACL and optionally role, and a translator. This means that you won't have to explicitly set all three in all navigational helpers, nor resort to injecting by means of static methods. Methods Method signature Description findHelper(string $helper, bool $strict = true) : Navigation\\HelperInterface Finds the given helper, verifies that it is a navigational helper, and injects the current container, ACL and role instances, and translator, if present. If $strict is true , the method will raise an exception when unable to find a valid helper. getInjectContainer() : bool Retrieve the flag indicating whether or not to inject the current container into proxied helpers; default is true . setInjectContainer(bool $flag) : self Set the flag indicating whether or not to inject the current container into proxied helpers. getInjectAcl() : bool Retrieve the flag indicating whether or not to inject ACL and role instances into proxied helpers; default is true . setInjectAcl(bool $flag) : self Set the flag indicating whether or not to inject ACL and role instances into proxied helpers. getInjectTranslator() : bool Retrieve the flag indicating whether or not to inject the current translator instance into proxied helpers; default is true . setInjectTranslator(bool $flag) : self Set the flag indicating whether or not to inject the current translator instance into proxied helpers. getDefaultProxy() : string Retrieve the default proxy helper to delegate to when rendering; defaults to menu . setDefaultProxy(string $helper) : self Set the default proxy helper to delegate to when rendering. render(AbstractContainer = null) Proxies to the render method of the default proxy.","title":"Navigation Proxy"},{"location":"helpers/navigation/#navigation-proxy","text":"The navigation() helper is a proxy helper that relays calls to other navigational helpers. It can be considered an entry point to all navigation-related view tasks. The Navigation helper finds other helpers that implement Laminas\\View\\Helper\\Navigation\\HelperInterface , which means custom view helpers can also be proxied. This would, however, require that the custom helper path is added to the view. When proxying to other helpers, the Navigation helper can inject its container, ACL and optionally role, and a translator. This means that you won't have to explicitly set all three in all navigational helpers, nor resort to injecting by means of static methods.","title":"Navigation Proxy"},{"location":"helpers/navigation/#methods","text":"Method signature Description findHelper(string $helper, bool $strict = true) : Navigation\\HelperInterface Finds the given helper, verifies that it is a navigational helper, and injects the current container, ACL and role instances, and translator, if present. If $strict is true , the method will raise an exception when unable to find a valid helper. getInjectContainer() : bool Retrieve the flag indicating whether or not to inject the current container into proxied helpers; default is true . setInjectContainer(bool $flag) : self Set the flag indicating whether or not to inject the current container into proxied helpers. getInjectAcl() : bool Retrieve the flag indicating whether or not to inject ACL and role instances into proxied helpers; default is true . setInjectAcl(bool $flag) : self Set the flag indicating whether or not to inject ACL and role instances into proxied helpers. getInjectTranslator() : bool Retrieve the flag indicating whether or not to inject the current translator instance into proxied helpers; default is true . setInjectTranslator(bool $flag) : self Set the flag indicating whether or not to inject the current translator instance into proxied helpers. getDefaultProxy() : string Retrieve the default proxy helper to delegate to when rendering; defaults to menu . setDefaultProxy(string $helper) : self Set the default proxy helper to delegate to when rendering. render(AbstractContainer = null) Proxies to the render method of the default proxy.","title":"Methods"},{"location":"helpers/sitemap/","text":"View Helper - Sitemap The sitemap() helper is used for generating XML sitemaps, as defined by the Sitemaps XML format . Read more about Sitemaps on Wikipedia . By default, the sitemap helper uses sitemap validators to validate each element that is rendered. This can be disabled by calling $helper-&gt;setUseSitemapValidators(false) . Sitemap XML elements Element Type Description loc string Absolute URL to page. An absolute URL will be generated by the helper. lastmod string The date of last modification of the file, in W3C Datetime format. This time portion can be omitted if desired, and only use YYYY-MM-DD. The helper will try to retrieve the lastmod value from the page's custom property lastmod if it is set in the page. If the value is not a valid date, it is ignored. changefreq string How frequently the page is likely to change. This value provides general information to search engines and may not correlate exactly to how often they crawl the page. Valid values are: \"always\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\", and \"never\". The helper will try to retrieve the changefreq value from the page's custom property changefreq if it is set in the page. If the value is not valid, it is ignored. priority float The priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. The helper will try to retrieve the priority value from the page's custom property priority if it is set in the page. If the value is not valid, it is ignored. Validation only when enabled If you disable sitemap validators, the custom properties (see table) are not validated at all. The sitemap helper also supports Sitemap XSD Schema validation of the generated sitemap. This is disabled by default, since it will require a request to the schema file. It can be enabled with $helper-&gt;setUseSchemaValidation(true) . Methods in the sitemap helper: Method signature Description getFormatOutput() : bool Retrieve the flag indicating whether or not generated XML should be formatted. Default is false . setFormatOutput(bool $flag) : self Set the flag indicating whether or not generated XML should be formatted. The flag corresponds to the the formatOutput property of the native DOMDocument class. Read more in the DOMDocument documentation . getUseXmlDeclaration() : bool Retrieve the flag indicating whether or not to emit the XML declaration when rendering; defaults to true . setUseXmlDeclaration(bool $flag) : self Set the flag indicating whether or not to emit the XML declaration when rendering. getUseSitemapValidators() : bool Retrieve the flag indicating whether or not sitemap validators should be used when generating the DOM; default is true . setUseSitemapValidators(bool $flag) : self Set the flag indicating whether or not sitemap validators should be used when generating the DOM. getUseSchemaValidation() : bool Retrieve the flag indicating whether or not the helper should use XML schema validation when generating the DOM; default is false . setUseSchemaValidation(bool $flag) : self Set the flag indicating whether or not the helper should use XML schema validation when generating the DOM. getServerUrl() : string Retrieve the server URL to prepend to non-absolute URIs via the url() method; if none is present, it will be determined by the helper. setServerUrl(string $url) : self Set the base server URL to prepend to non-absolute URIs. url(AbstractPage $page) : string Generate an absolute URL for the provided page. getDomSitemap(AbstractContainer = null) : DOMDocument Generates a DOMDocument sitemap representation from the given container. Basic usage This example shows how to render an XML sitemap based on the setup we did further up. // In a view script or layout: // format output $this-&gt;navigation() -&gt;sitemap() -&gt;setFormatOutput(true); // default is false // Other possible methods: // -&gt;setUseXmlDeclaration(false); // default is true // -&gt;setServerUrl('http://my.otherhost.com'); // default is to detect automatically // print sitemap echo $this-&gt;navigation()-&gt;sitemap(); Notice how pages that are invisible or pages with ACL roles incompatible with the view helper are filtered out: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/faq&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/editions&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/requirements&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/customers&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/support&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news/press&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/archive&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community/account&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt; Rendering using no ACL role Render the sitemap using no ACL role (should filter out /community/account ): echo $this-&gt;navigation()-&gt;sitemap() -&gt;setFormatOutput(true) -&gt;setRole(); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/faq&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/editions&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/requirements&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/customers&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/support&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news/press&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/archive&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt; Rendering using a maximum depth Render the sitemap using a maximum depth of 1. echo $this-&gt;navigation()-&gt;sitemap() -&gt;setFormatOutput(true) -&gt;setMaxDepth(1); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community/account&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt; UTF-8 encoding used by default By default, laminas-view uses UTF-8 as its default encoding. If you want to use another encoding with Sitemap , you will have do three things: Create a custom renderer and implement a getEncoding() method. Create a custom rendering strategy that will return an instance of your custom renderer. Attach the custom strategy in the ViewEvent . See the example from the HeadStyle documentation to see how you can achieve this.","title":"Sitemap"},{"location":"helpers/sitemap/#view-helper-sitemap","text":"The sitemap() helper is used for generating XML sitemaps, as defined by the Sitemaps XML format . Read more about Sitemaps on Wikipedia . By default, the sitemap helper uses sitemap validators to validate each element that is rendered. This can be disabled by calling $helper-&gt;setUseSitemapValidators(false) .","title":"View Helper - Sitemap"},{"location":"helpers/sitemap/#sitemap-xml-elements","text":"Element Type Description loc string Absolute URL to page. An absolute URL will be generated by the helper. lastmod string The date of last modification of the file, in W3C Datetime format. This time portion can be omitted if desired, and only use YYYY-MM-DD. The helper will try to retrieve the lastmod value from the page's custom property lastmod if it is set in the page. If the value is not a valid date, it is ignored. changefreq string How frequently the page is likely to change. This value provides general information to search engines and may not correlate exactly to how often they crawl the page. Valid values are: \"always\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\", and \"never\". The helper will try to retrieve the changefreq value from the page's custom property changefreq if it is set in the page. If the value is not valid, it is ignored. priority float The priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. The helper will try to retrieve the priority value from the page's custom property priority if it is set in the page. If the value is not valid, it is ignored.","title":"Sitemap XML elements"},{"location":"helpers/sitemap/#basic-usage","text":"This example shows how to render an XML sitemap based on the setup we did further up. // In a view script or layout: // format output $this-&gt;navigation() -&gt;sitemap() -&gt;setFormatOutput(true); // default is false // Other possible methods: // -&gt;setUseXmlDeclaration(false); // default is true // -&gt;setServerUrl('http://my.otherhost.com'); // default is to detect automatically // print sitemap echo $this-&gt;navigation()-&gt;sitemap(); Notice how pages that are invisible or pages with ACL roles incompatible with the view helper are filtered out: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/faq&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/editions&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/requirements&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/customers&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/support&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news/press&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/archive&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community/account&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt;","title":"Basic usage"},{"location":"helpers/sitemap/#rendering-using-no-acl-role","text":"Render the sitemap using no ACL role (should filter out /community/account ): echo $this-&gt;navigation()-&gt;sitemap() -&gt;setFormatOutput(true) -&gt;setRole(); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/faq&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/editions&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server/requirements&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/customers&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio/support&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news/press&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/archive&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt;","title":"Rendering using no ACL role"},{"location":"helpers/sitemap/#rendering-using-a-maximum-depth","text":"Render the sitemap using a maximum depth of 1. echo $this-&gt;navigation()-&gt;sitemap() -&gt;setFormatOutput(true) -&gt;setMaxDepth(1); Output: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/server&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/products/studio&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/about/investors&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/company/news&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://www.example.com/community/account&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;http://forums.example.com/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt;","title":"Rendering using a maximum depth"}]}